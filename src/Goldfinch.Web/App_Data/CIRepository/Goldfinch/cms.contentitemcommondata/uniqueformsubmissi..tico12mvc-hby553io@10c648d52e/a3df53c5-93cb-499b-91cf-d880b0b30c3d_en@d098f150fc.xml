<?xml version="1.0" encoding="utf-8"?>
<cms.contentitemcommondata>
  <ContentItemCommonDataContentItemID>
    <CodeName>UniqueFormSubmissionsInKentico12MVC-hby553io</CodeName>
    <GUID>6972a84c-717d-4572-a4f0-d6a017de826d</GUID>
    <ObjectType>cms.contentitem</ObjectType>
  </ContentItemCommonDataContentItemID>
  <ContentItemCommonDataContentLanguageID>
    <CodeName>en</CodeName>
    <GUID>22960170-5c33-4d4e-a01b-fd4c8fcbd13d</GUID>
    <ObjectType>cms.contentlanguage</ObjectType>
  </ContentItemCommonDataContentLanguageID>
  <ContentItemCommonDataGUID>a3df53c5-93cb-499b-91cf-d880b0b30c3d</ContentItemCommonDataGUID>
  <ContentItemCommonDataIsLatest>True</ContentItemCommonDataIsLatest>
  <ContentItemCommonDataVersionStatus>2</ContentItemCommonDataVersionStatus>
  <ContentItemCommonDataVisualBuilderWidgets>
    <![CDATA[{"editableAreas":[{"identifier":"BlogPost","sections":[{"identifier":"9ff8ec95-7f18-4213-820a-e82c27aff000","type":"Kentico.DefaultSection","properties":null,"zones":[{"identifier":"434a0691-f826-49d5-a97e-4c6f2cbcc79b","name":null,"widgets":[{"identifier":"c138a77a-f0e6-4189-aa74-933f7e68a429","type":"Kentico.Widget.RichText","conditionType":null,"variants":[{"identifier":"761994a4-6067-4865-a7bb-46f9758aa552","name":null,"properties":{"content":"<p>When adding forms to websites, there may be occasions where you might prefer to restrict form respondents from making multiple form submissions. It could be that your form represents a method of signing up for an event, registering interest in a topic or webinar, or you might simply prefer that the same email address isn't associated with multiple form submissions.</p><p>This topic popped up recently as a question on the <a href=\"https://devnet.kentico.com/questions-answers\" rel=\"noopener noreferrer\" target=\"_blank\">Questions &amp; Answers</a> section of the <a href=\"https://devnet.kentico.com/\" rel=\"noopener noreferrer\" target=\"_blank\">Xperience DevNet</a> portal. If you are new to developing Xperience websites, or you find you are having trouble implementing a certain feature of Xperience, then I highly recommend submitting questions on the Q&amp;A section of DevNet. You can get really good solutions and detailed explanations from the Xperience community, including answers from <a href=\"https://xperience.io/partnership/mvp-program\" rel=\"noopener noreferrer\" target=\"_blank\">Xperience MVPs</a> and members of the Kentico Support team.</p><p>For this question in particular, I provided sample code which can be used in your Xperience MVC site. This module intercepts a form submission, checks for fields containing the keyword email, and compares the values submitted against values from other submissions to find a match. &nbsp;If it finds a match then the form submission is cancelled and an error is displayed, otherwise the form continues to process as you would expect. &nbsp;You can find the sample code below:</p>"},"conditionTypeParameters":null,"fieldIdentifiers":{}}]},{"identifier":"95617da9-1a1c-4047-8b50-e4174ebade79","type":"Goldfinch.CodeBlockWidget","conditionType":null,"variants":[{"identifier":"1cbefa6c-124a-428f-9b25-ee1f3632cc97","name":null,"properties":{"language":"csharp","code":"using CMS;\r\nusing CMS.DataEngine;\r\nusing CMS.OnlineForms;\r\nusing DancingGoat.GlobalEvents;\r\nusing System.Linq;\r\n\r\n[assembly: RegisterModule(typeof(FormGlobalEventsModule))]\r\nnamespace DancingGoat.GlobalEvents\r\n{\r\n    public class FormGlobalEventsModule : Module\r\n    {\r\n        public FormGlobalEventsModule() : base(\"DancingGoat.FormGlobalEventsModule\")\r\n        {\r\n        }\r\n\r\n        protected override void OnInit()\r\n        {\r\n            base.OnInit();\r\n\r\n            // Register custom events\r\n            BizFormItemEvents.Insert.Before += Insert_Before;\r\n        }\r\n\r\n        private void Insert_Before(object sender, BizFormItemEventArgs e)\r\n        {\r\n            var item = e.Item;\r\n\r\n            // Sanity check to ensure we actually have a bizform item.\r\n            if (item == null)\r\n            {\r\n                return;\r\n            }\r\n\r\n            // Get all column names that contain email.\r\n            var columnNames = item.ColumnNames.Where(x => x.ToLowerInvariant().Contains(\"email\"));\r\n\r\n            // Loop over all column names containing the keyword email.\r\n            foreach (var columnName in columnNames)\r\n            {\r\n                // Get the submitted email address value.\r\n                var email = item.GetStringValue(columnName, string.Empty);\r\n\r\n                // Lookup the current bizform for submissions with the same field value.\r\n                var existingEntry = BizFormItemProvider.GetItems(e.Item.BizFormClassName)\r\n                    .Column(columnName)\r\n                    .TopN(1)\r\n                    .WhereEquals(columnName, email)\r\n                    .FirstOrDefault();\r\n\r\n                // If it already exists, cancel it (displays an error on the MVC site).\r\n                if (existingEntry != null)\r\n                {\r\n                    e.Cancel();\r\n                }\r\n            }\r\n        }\r\n    }\r\n}"},"conditionTypeParameters":null,"fieldIdentifiers":{}}]}]}]}]}]}]]>
  </ContentItemCommonDataVisualBuilderWidgets>
</cms.contentitemcommondata>