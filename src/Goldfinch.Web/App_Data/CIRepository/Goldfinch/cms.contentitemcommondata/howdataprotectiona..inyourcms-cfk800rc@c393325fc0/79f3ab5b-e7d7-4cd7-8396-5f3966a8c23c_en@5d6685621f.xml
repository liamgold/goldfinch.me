<?xml version="1.0" encoding="utf-8"?>
<cms.contentitemcommondata>
  <ContentItemCommonDataContentItemID>
    <CodeName>HowDataProtectionAPIs_DPAPI_EnhanceSecurityInYourCMS-cfk800rc</CodeName>
    <GUID>a51fab9b-95cf-42d0-89c1-b7b3d8facd5c</GUID>
    <ObjectType>cms.contentitem</ObjectType>
  </ContentItemCommonDataContentItemID>
  <ContentItemCommonDataContentLanguageID>
    <CodeName>en</CodeName>
    <GUID>22960170-5c33-4d4e-a01b-fd4c8fcbd13d</GUID>
    <ObjectType>cms.contentlanguage</ObjectType>
  </ContentItemCommonDataContentLanguageID>
  <ContentItemCommonDataFirstPublishedWhen>2025-03-18 00:04:58Z</ContentItemCommonDataFirstPublishedWhen>
  <ContentItemCommonDataGUID>79f3ab5b-e7d7-4cd7-8396-5f3966a8c23c</ContentItemCommonDataGUID>
  <ContentItemCommonDataIsLatest>True</ContentItemCommonDataIsLatest>
  <ContentItemCommonDataLastPublishedWhen>2025-03-18 00:21:11Z</ContentItemCommonDataLastPublishedWhen>
  <ContentItemCommonDataVersionStatus>2</ContentItemCommonDataVersionStatus>
  <ContentItemCommonDataVisualBuilderWidgets>
    <![CDATA[{"editableAreas":[{"identifier":"BlogPost","sections":[{"identifier":"7e0f3fb7-1d7b-463f-8c17-59b847c3cc1f","type":"Kentico.DefaultSection","properties":null,"zones":[{"identifier":"e4fcb02a-1e00-4de6-869e-e205df17fc8a","widgets":[{"identifier":"19334074-4bd8-4a5f-b208-a083ab797b61","type":"Kentico.Widget.RichText","variants":[{"identifier":"cacf503e-437f-4640-9f7b-f84f19f3ce2c","properties":{"content":"<p>Securing sensitive data is essential in modern CMS platforms. ASP.NET Core provides the&nbsp;<strong>Data Protection API (DPAPI)</strong> to help simplify encryption, decryption, and key management. DPAPI is used in many features, including ASP.NET authentication, so even if you're not using it directly, it is important to understand the basics.</p><p><strong>What actually is DPAPI? 🤔</strong></p><p>DPAPI is a set of built-in APIs that allow developers to protect sensitive&nbsp;<strong>short-lived</strong> data without having to manually implement their own cryptographic algorithms. It follows best practises, offers cross-platform support, and flexible storage options (which we will cover later).</p><p>I used the term short-lived because the default expiration timeframe is&nbsp;<a href=\"https://learn.microsoft.com/en-us/aspnet/core/security/data-protection/implementation/key-management?view=aspnetcore-9.0#key-expiration-and-rolling\" target=\"_blank\" rel=\"noopener noreferrer\">90 days</a>. Although this number is configurable, I wouldn't recommend extending it. It exists to keep key rotation to&nbsp;maintain security.</p><p>Microsoft's own&nbsp;<a href=\"https://learn.microsoft.com/en-us/aspnet/core/security/data-protection/using-data-protection?view=aspnetcore-9.0\" target=\"_blank\" rel=\"noopener noreferrer\">documentation</a> provides a basic example taking user input from a console application, encrypting it, and finally decrypting the value again.</p>"},"fieldIdentifiers":{"content":"45657957-b770-4f4e-bca1-8d424ad5456b"}}]},{"identifier":"a18b6fb7-2673-47aa-b366-74de0a25e333","type":"Goldfinch.CodeBlockWidget","variants":[{"identifier":"2aea9734-9854-49e2-8246-d51948dd8e2e","properties":{"language":"csharp","code":"using System;\nusing Microsoft.AspNetCore.DataProtection;\nusing Microsoft.Extensions.DependencyInjection;\n\npublic class Program\n{\n    public static void Main(string[] args)\n    {\n        // add data protection services\n        var serviceCollection = new ServiceCollection();\n        serviceCollection.AddDataProtection();\n        var services = serviceCollection.BuildServiceProvider();\n\n        // create an instance of MyClass using the service provider\n        var instance = ActivatorUtilities.CreateInstance<MyClass>(services);\n        instance.RunSample();\n    }\n\n    public class MyClass\n    {\n        IDataProtector _protector;\n\n        // the 'provider' parameter is provided by DI\n        public MyClass(IDataProtectionProvider provider)\n        {\n            _protector = provider.CreateProtector(\"Contoso.MyClass.v1\");\n        }\n\n        public void RunSample()\n        {\n            Console.Write(\"Enter input: \");\n            string input = Console.ReadLine();\n\n            // protect the payload\n            string protectedPayload = _protector.Protect(input);\n            Console.WriteLine($\"Protect returned: {protectedPayload}\");\n\n            // unprotect the payload\n            string unprotectedPayload = _protector.Unprotect(protectedPayload);\n            Console.WriteLine($\"Unprotect returned: {unprotectedPayload}\");\n        }\n    }\n}\n\n/*\n * SAMPLE OUTPUT\n *\n * Enter input: Hello world!\n * Protect returned: CfDJ8ICcgQwZZhlAlTZT...OdfH66i1PnGmpCR5e441xQ\n * Unprotect returned: Hello world!\n */"},"fieldIdentifiers":{"language":"45101ae9-53d7-449c-8deb-6381beb15954","code":"3fdc6af8-fb23-48e8-a84b-1499793deb12"}}]},{"identifier":"b705794e-1e41-420b-8786-55c6c0bdeb39","type":"Kentico.Widget.RichText","variants":[{"identifier":"59a585f9-c9ce-4094-ba30-9d7da646a12a","properties":{"content":"<p><strong>Who remembers MachineKey? 👴</strong></p><p>If you've worked with older .NET Framework applications, you may remember MachineKey. DPAPI is a direct replacement for it.</p><p>In older .NET Framework systems, MachineKey was configured in the&nbsp;<strong>web.config</strong> for managing encryption keys. This had to be manually synced across servers, and lacked automatic key rotation. It also relied on older encryption algorithms compared to DPAPI which makes it less secure.</p><p><strong>Why is it important to know the basics?</strong></p><p>While working on a recent project in Xperience by&nbsp;<a href=\"https://www.kentico.com/\" target=\"_blank\" rel=\"noopener noreferrer\">Kentico</a>, I encountered an issue where email validation links for a registration process were&nbsp;<strong>sometimes failing</strong>.</p><p>The majority of users successfully submitted the registration form, received the validation email, and clicked the link to confirm their accounts. However, a small subset of users encountered an error when clicking the link. How frustrating! 😢</p><p><strong>What went wrong?</strong></p><p>The site had been running perfectly on a single server setup, but the problems began after it was moved to a load-balanced environment. The keys used to encrypt the email validation tokens were not shared across the two servers.</p><p>If a user registered on Server 1 but then clicked the email link and was redirected to Server 2, Server 2 didn't have access to the same encryption keys, causing the validation to fail.</p>"},"fieldIdentifiers":{"content":"64b81635-4e67-4a0a-be64-6f8668770246"}}]},{"identifier":"26b8b001-618d-4d1e-b781-a9b53a2e6d54","type":"Goldfinch.ImageWidget","variants":[{"identifier":"321f47f5-f40a-4351-8dbd-9980a6b1f01a","properties":{"selectedAssets":[{"identifier":"c3333312-3c72-44cf-8269-1d193a35b1d4"}]},"fieldIdentifiers":{"selectedAssets":"6f1c5916-f90f-4085-ab85-34a252e0f909"}}]},{"identifier":"7578a97a-d389-46e9-8594-9d26a6207dec","type":"Kentico.Widget.RichText","variants":[{"identifier":"78b5ab13-4b3c-45fe-aa60-30ce559851f6","properties":{"content":"<p><strong>Flexible storage options for keys</strong></p><p>The solution is to configure a persistent shared storage for encryption keys across all servers.</p>"},"fieldIdentifiers":{"content":"e0a19d7d-c0c2-40a1-8a0f-d1792375cf00"}}]},{"identifier":"7a83acf1-23bc-421d-96e1-db0bc978f048","type":"Goldfinch.ImageWidget","variants":[{"identifier":"e11400cc-f1ee-405d-91a4-ff9549d25f2d","properties":{"selectedAssets":[{"identifier":"fe7d140f-5db5-4b96-8f00-5896d57cb15b"}]},"fieldIdentifiers":{"selectedAssets":"0243d5fa-3947-4631-a3cb-46c9fecf7f1f"}}]},{"identifier":"7cd36c1b-e299-4775-8da0-40087eae96d1","type":"Kentico.Widget.RichText","variants":[{"identifier":"92459804-386f-43c4-ba41-cda0d9666734","properties":{"content":"<p>By default, ASP.NET will store keys in <a href=\"https://learn.microsoft.com/en-gb/aspnet/core/security/data-protection/configuration/default-settings?view=aspnetcore-9.0#key-management\" target=\"_blank\" rel=\"noopener noreferrer\">a folder on the machine</a>, or in memory. This is fine for local development, but really for production you will want to look at a more robust storage solution.</p><p>Here are the most common options:</p><p><strong>Option 1 - File System</strong></p><p>The first option is file system storage. This allows full control over where the keys are stored locally. I recommend setting this as an&nbsp;<strong>absolute minimum</strong>, so you know where the keys are stored. It can also be useful for scenarios where you have shared network drives between servers.</p>"},"fieldIdentifiers":{"content":"86472db0-1303-495f-828e-0031e282a5ab"}}]},{"identifier":"3e4c02d8-9658-4c7f-b3a9-eacd2bb31313","type":"Goldfinch.CodeBlockWidget","variants":[{"identifier":"9d611b6b-1e61-4777-995a-a8f6de416a2a","properties":{"language":"csharp","code":"services\n    .AddDataProtection()\n    .SetApplicationName(\"MyCMS\")\n    .PersistKeysToFileSystem(new DirectoryInfo(@\"/keys\"));"},"fieldIdentifiers":{"language":"0f1ff03c-d4ec-4ce2-aab2-4a989a750bab","code":"d7dc6cef-fefd-4a70-bff4-5e6a1951f495"}}]},{"identifier":"0b255b5c-7426-4814-95d7-342141122603","type":"Kentico.Widget.RichText","variants":[{"identifier":"a5a47f1d-e866-492d-9c36-9ecb93ca4cf2","properties":{"content":"<p><strong>Option 2 - Azure Key Vault/Blob Storage</strong></p><p>If you're using Azure, you can store encryption keys in Azure Blob Storage using the&nbsp;<strong>Azure.Extensions.AspNetCore.DataProtection.Blobs</strong> package.</p>"},"fieldIdentifiers":{"content":"5f6f1ce9-4f35-4acb-a234-0d300c7de451"}}]},{"identifier":"4bb988e3-a287-44d4-a083-919675f3a985","type":"Goldfinch.CodeBlockWidget","variants":[{"identifier":"473ef537-8199-498b-b2a8-f15ad2b79dc4","properties":{"language":"csharp","code":"services\n    .AddDataProtection()\n    .SetApplicationName(\"MyCMS\")\n    .PersistKeysToAzureBlobStorage(new Uri(<BlobStorageUri>), new DefaultAzureCredential())\n    .ProtectKeysWithAzureKeyVault(new Uri(<KeyVaultUri>), new DefaultAzureCredential());"},"fieldIdentifiers":{"language":"7e7c5e6d-3d12-4a80-96c4-425c7d665652","code":"fbe4394d-22ff-4c54-acf3-1e1dd58044c7"}}]},{"identifier":"76399496-c04e-4d20-8220-0b9b814da146","type":"Kentico.Widget.RichText","variants":[{"identifier":"3f480e4e-ce74-4354-93cc-90bebd134328","properties":{"content":"<p><strong>Option 3 - Redis Cache</strong></p><p>If you're already using Redis for a distributed cache, you can store encryption keys there as well, using&nbsp;<strong>Microsoft.AspNetCore.DataProtection.StackExchangeRedis</strong> package.</p>"},"fieldIdentifiers":{"content":"926dd34d-0e7a-4f75-a6b1-22eec72064b9"}}]},{"identifier":"b858a21d-092a-455f-9160-2494b4882ed0","type":"Goldfinch.CodeBlockWidget","variants":[{"identifier":"cfb1e0ed-dab1-4734-8298-a448a0d2148b","properties":{"language":"csharp","code":"var redis = ConnectionMultiplexer.Connect(\"<RedisUri>\");\nservices\n    .AddDataProtection()\n    .SetApplicationName(\"MyCMS\")\n    .PersistKeysToStackExchangeRedis(redis, \"DataProtection-Keys\");"},"fieldIdentifiers":{"language":"83cea8ba-0b74-4ef7-9728-acbd4e636a90","code":"d50da663-48dc-4bc2-aafc-26c71169ab82"}}]},{"identifier":"1a341f38-42a9-440f-ad8c-c71498859ee3","type":"Kentico.Widget.RichText","variants":[{"identifier":"775aaa5f-b09d-4a47-9c31-e465a494a247","properties":{"content":"<p><strong>Xperience by Kentico</strong></p><p>If you're using Kentico's SaaS platform, you don't have to worry about key storage! Kentico automatically handles storage for you. 😎</p><p>In February 2025's&nbsp;<a href=\"https://docs.kentico.com/changelog#refresh-february-20-2025\" target=\"_blank\" rel=\"noopener noreferrer\">refresh</a>, Kentico added a new Data Protection extension method which does all of the configuration for you. 👏</p><p>If you're updating an existing project, make sure you include the following to enable it:</p>"},"fieldIdentifiers":{"content":"ffe4b5fd-89f8-41e2-9b7a-a74f8091be0e"}}]},{"identifier":"e20d7bd8-b171-4155-9f6b-65f9d7d21863","type":"Goldfinch.CodeBlockWidget","variants":[{"identifier":"43b147cd-ab6c-4a48-90a1-60af5f3aa34a","properties":{"language":"csharp","code":"using Kentico.Xperience.Cloud;\n\n// ...\n\nWebApplicationBuilder builder = WebApplication.CreateBuilder(args);\n\n// ...\n\n// Enables the DataProtection API in all SaaS environments\nif (builder.Environment.IsQa() || builder.Environment.IsUat() || builder.Environment.IsProduction() || builder.Environment.IsEnvironment(CloudEnvironments.Custom))\n{\n    // ...\n\n    builder.Services.AddXperienceCloudDataProtection(builder.Configuration);\n}"},"fieldIdentifiers":{"language":"6b2656b8-7f34-44ed-ad3f-dad3b322be70","code":"c9cda9ce-f423-4730-8291-7a59c2a9d0ee"}}]},{"identifier":"5931a2a1-9b56-44a4-ac59-66be38766f89","type":"Kentico.Widget.RichText","variants":[{"identifier":"68dbaf51-4689-4b75-b53e-d8f36df9b9ca","properties":{"content":"<p><strong>Umbraco</strong></p><p>If you're using Umbraco, you will need to consider configuring key storage. Out of the box,&nbsp;<a href=\"https://github.com/umbraco/Umbraco-CMS/blob/e9ba06929f71b16373982a30f834e5f527e1d7c0/src/Umbraco.Web.Website/DependencyInjection/UmbracoBuilderExtensions.cs#L45\" target=\"_blank\" rel=\"noopener noreferrer\">Umbraco enables DPAPI</a> but doesn't configure it at all. If you don't configure storage, then you may experience similar problems I have described in load-balanced scenarios.</p><p>If you don't want to configure key storage, there is a&nbsp;<a href=\"https://marketplace.umbraco.com/package/umbraco.community.dataprotection\" target=\"_blank\" rel=\"noopener noreferrer\">community package</a> available which helps you use the Umbraco database instead.</p><p><strong>Conclusion</strong></p><p>Using Data Protection APIs (DPAPI) is essential for securing short-lived data in your CMS. Unlike the old MachineKey, DPAPI provides automatic key rotation, modern encryption algorithms, and cross-server key storage.</p><p>For load-balanced environments, always configure persistent key storage using File System, Azure, or Redis.</p><p>If you're using Xperience by Kentico, encryption is already managed for you, but in Umbraco, you must configure an external key store.</p>"},"fieldIdentifiers":{"content":"5d68ca2f-4ed0-4d2e-b9fb-76cd0f6b215d"}}]}]}],"fieldIdentifiers":{}}]}]}]]>
  </ContentItemCommonDataVisualBuilderWidgets>
  <ContentItemReferences>
    <cms.contentitemreference>
      <ContentItemReferenceGroupGUID>6f1c5916-f90f-4085-ab85-34a252e0f909</ContentItemReferenceGroupGUID>
      <ContentItemReferenceGUID>a20f0a97-5dcc-4ad1-bb44-86af05a178bd</ContentItemReferenceGUID>
      <ContentItemReferenceSourceCommonDataID>
        <GUID>79f3ab5b-e7d7-4cd7-8396-5f3966a8c23c</GUID>
        <ObjectType>cms.contentitemcommondata</ObjectType>
      </ContentItemReferenceSourceCommonDataID>
      <ContentItemReferenceTargetItemID>
        <CodeName>DPAPI-LocalStorage-n33g2u22</CodeName>
        <GUID>c3333312-3c72-44cf-8269-1d193a35b1d4</GUID>
        <ObjectType>cms.contentitem</ObjectType>
      </ContentItemReferenceTargetItemID>
    </cms.contentitemreference>
    <cms.contentitemreference>
      <ContentItemReferenceGroupGUID>0243d5fa-3947-4631-a3cb-46c9fecf7f1f</ContentItemReferenceGroupGUID>
      <ContentItemReferenceGUID>ab25da4b-33a8-470c-b935-141838cc6c55</ContentItemReferenceGUID>
      <ContentItemReferenceSourceCommonDataID>
        <GUID>79f3ab5b-e7d7-4cd7-8396-5f3966a8c23c</GUID>
        <ObjectType>cms.contentitemcommondata</ObjectType>
      </ContentItemReferenceSourceCommonDataID>
      <ContentItemReferenceTargetItemID>
        <CodeName>DPAPI-SharedStorage-grbaszn4</CodeName>
        <GUID>fe7d140f-5db5-4b96-8f00-5896d57cb15b</GUID>
        <ObjectType>cms.contentitem</ObjectType>
      </ContentItemReferenceTargetItemID>
    </cms.contentitemreference>
  </ContentItemReferences>
</cms.contentitemcommondata>