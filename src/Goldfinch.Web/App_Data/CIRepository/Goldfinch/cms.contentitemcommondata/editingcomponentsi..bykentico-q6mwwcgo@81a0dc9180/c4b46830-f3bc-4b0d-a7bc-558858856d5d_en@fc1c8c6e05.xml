<?xml version="1.0" encoding="utf-8"?>
<cms.contentitemcommondata>
  <ContentItemCommonDataContentItemID>
    <CodeName>EditingComponentsInXperienceByKentico-q6mwwcgo</CodeName>
    <GUID>45579b5e-6403-4f8b-b841-e5e8833e4551</GUID>
    <ObjectType>cms.contentitem</ObjectType>
  </ContentItemCommonDataContentItemID>
  <ContentItemCommonDataContentLanguageID>
    <CodeName>en</CodeName>
    <GUID>22960170-5c33-4d4e-a01b-fd4c8fcbd13d</GUID>
    <ObjectType>cms.contentlanguage</ObjectType>
  </ContentItemCommonDataContentLanguageID>
  <ContentItemCommonDataGUID>c4b46830-f3bc-4b0d-a7bc-558858856d5d</ContentItemCommonDataGUID>
  <ContentItemCommonDataIsLatest>True</ContentItemCommonDataIsLatest>
  <ContentItemCommonDataLastPublishedWhen>2024-07-24 13:56:13Z</ContentItemCommonDataLastPublishedWhen>
  <ContentItemCommonDataVersionStatus>2</ContentItemCommonDataVersionStatus>
  <ContentItemCommonDataVisualBuilderWidgets>
    <![CDATA[{"editableAreas":[{"identifier":"BlogPost","sections":[{"identifier":"4d9f0746-4180-4dae-977b-218220dae9f8","type":"Kentico.DefaultSection","properties":null,"zones":[{"identifier":"c6da6828-a6cc-4f0a-b49d-d6106c3fb5dc","widgets":[{"identifier":"0c722bc2-68fa-4993-a56e-62e0510f0e38","type":"Kentico.Widget.RichText","variants":[{"identifier":"e6c54c82-6513-42d3-83d4-97b5c29939a9","properties":{"content":"<p>Over the past year, Kentico have launched and iteratively improved their new modern cloud-native DXP, Xperience by Kentico. It was introduced to the world through the&nbsp;<a href=\"https://www.kentico.com/platform/xap\" rel=\"noopener noreferrer\" target=\"_blank\">Xperience Adopters Program</a>, and new features have been added through&nbsp;<a href=\"https://docs.xperience.io/xp/changelog\" rel=\"noopener noreferrer\" target=\"_blank\">monthly refreshes</a>. The latest refresh introduces external authentication for the administration portal - a&nbsp;<strong>must&nbsp;</strong>for most businesses these days! It is rare that I work on a project at&nbsp;<a href=\"https://www.idhlagency.com/\" rel=\"noopener noreferrer\" target=\"_blank\">IDHL</a> that doesn't require authentication with a single sign-on (SSO). Kentico are really looking after their customers needs by including these integrations out of the box. 🥰</p><p>So, you've now seen the monthly refresh release notes, and you might have read through&nbsp;<a href=\"https://dev.to/seangwright/exploring-xperience-by-kentico-introductions-li9\" rel=\"noopener noreferrer\" target=\"_blank\">a number</a> <a href=\"https://www.mcbeev.com/xperience-by-kentico-at-20023-feet\" rel=\"noopener noreferrer\" target=\"_blank\">of introductory</a> <a href=\"https://www.luminary.com/blog/next-generation-xperience-by-kentico\" rel=\"noopener noreferrer\" target=\"_blank\">blog posts</a> for Xperience by Kentico, and now you've decided that your Kentico Xperience 13 website needs to be upgraded, right? 😁 Well, lucky for you Kentico has your back!</p><p>Kentico have created some&nbsp;<a href=\"https://docs.xperience.io/xp/developers-and-admins/upgrade-from-kentico-xperience-13\" rel=\"noopener noreferrer\" target=\"_blank\">documentation</a> about the architectural differences between Kentico Xperience 13 and Xperience by Kentico, tips on how the API has changed, and more importantly a link to the&nbsp;<a href=\"https://github.com/Kentico/xperience-migration-toolkit\" rel=\"noopener noreferrer\" target=\"_blank\">Migration Toolkit</a>. The toolkit is designed to help you keep your content and data while upgrading your website to Xperience by Kentico, you don't need to start from scratch again.</p><p>The documentation also mentions that the administration portal is now based on .NET Core and ReactJS (which is why it is super fast! ⚡), and that there are API changes around editing components. The implementation of these API changes in your projects is recommended, but not required. Xperience by Kentico currently offers backwards compatibility with classic Kentico Xperience 13 editing components, so you don't need to rush to switch. But with the backwards compatibility not guaranteed for the long term, and the API changes being so simple, you might as well benefit from switching to the new ReactJS based editing components.</p><p>On my blog website, I have already made the switch for all of my widgets, and the process was very simple. Lets take a look at the&nbsp;<strong>Code Block</strong> widget, the properties modal should look very familiar for developers and marketers of Kentico Xperience 13 websites.</p>"},"fieldIdentifiers":{"content":"6df8ec28-12d0-4002-9b83-6c971411be9c"}}]},{"identifier":"675eb325-d733-491a-a158-9cf49f3fc7bb","type":"Goldfinch.ImageWidget","variants":[{"identifier":"26ec0da7-478b-4f81-aa2b-60f34007cb9c","properties":{"selectedAssets":[{"identifier":"b1f8ec33-24b9-4660-a39a-71ec7cead4d9"}]},"fieldIdentifiers":{"selectedAssets":"63443eec-c610-4c9b-a5c9-e7336393be55"}}]},{"identifier":"ea7f302b-44ae-4c14-9dbb-a08d07a24575","type":"Kentico.Widget.RichText","variants":[{"identifier":"fbe3cd30-b1a2-4d68-890c-701fa361a38e","properties":{"content":"<p>This widget is very simple, it has a dropdown to select the programming language for syntax highlighting, and a text area for pasting my code into. The properties class looks like this:</p>"},"fieldIdentifiers":{"content":"8cf1b05d-79ff-41ef-8698-75b4a77c38e3"}}]},{"identifier":"d1f163a7-02ca-4eb7-9552-acc25353086f","type":"Goldfinch.CodeBlockWidget","variants":[{"identifier":"7c7e490c-7a4a-4262-82c0-a70209dbd42d","properties":{"language":"csharp","code":"using Kentico.Forms.Web.Mvc;\nusing Kentico.PageBuilder.Web.Mvc;\n\nnamespace Goldfinch.Web.Components.Widgets.CodeBlock\n{\n    public class CodeBlockWidgetProperties : IWidgetProperties\n    {\n        public const string LanguageDataSource = \"csharp;C#\\r\\njavascript;JavaScript\\r\\ntypescript;TypeScript\\r\\ncss;CSS\";\n\n        [EditingComponent(DropDownComponent.IDENTIFIER, Order = 1, Label = \"Language\")]\n        [EditingComponentProperty(nameof(DropDownProperties.DataSource), LanguageDataSource)]\n        public string Language { get; set; } = \"csharp\";\n\n        [EditingComponent(TextAreaComponent.IDENTIFIER, Label = \"Code\", Order = 2)]\n        public string Code { get; set; }\n    }\n}"},"fieldIdentifiers":{"language":"3dcc38d7-5d9a-4951-acb9-700530376bb2","code":"e1b939a1-b0bd-43aa-ac85-6b7dd2dcdbca"}}]},{"identifier":"8afb03ab-6c4a-4867-a50c-1cd15823638c","type":"Kentico.Widget.RichText","variants":[{"identifier":"f16cda2b-95fb-4b97-b920-c6ff55cf1115","properties":{"content":"<p>After converting the widget to use the new ReactJS editing components, you instantly notice the visual differences. It has a cleaner look and feel, and offers a more responsive layout than the previous editing components.</p>"},"fieldIdentifiers":{"content":"bdd86072-8eca-40f7-ac7c-faccf6a23c3b"}}]},{"identifier":"c48d712f-546f-48a8-a36e-d1325769a450","type":"Goldfinch.ImageWidget","variants":[{"identifier":"f66a25d7-465a-4e49-a6e9-cf9f0d60c6b6","properties":{"selectedAssets":[{"identifier":"c406cc15-2f4e-4848-990c-77c92098c016"}]},"fieldIdentifiers":{"selectedAssets":"3a1822b3-5144-4cd5-b48b-af9aa63881c1"}}]},{"identifier":"7a4ba4eb-1701-4975-b217-29e3ac5f8b89","type":"Kentico.Widget.RichText","variants":[{"identifier":"acf1faa1-a3f4-45be-9dd0-078e582d9174","properties":{"content":"<p>But what does the properties class look like now?</p>"},"fieldIdentifiers":{"content":"2d551f30-83c6-461f-8786-82189c1d5267"}}]},{"identifier":"6eb73336-9234-4907-8acc-af815ac9a23a","type":"Goldfinch.CodeBlockWidget","variants":[{"identifier":"cd89cf3f-db11-4b7a-bfbc-19205d9212fc","properties":{"language":"csharp","code":"using Kentico.PageBuilder.Web.Mvc;\nusing Kentico.Xperience.Admin.Base.FormAnnotations;\n\nnamespace Goldfinch.Web.Components.Widgets.CodeBlock\n{\n    public class CodeBlockWidgetProperties : IWidgetProperties\n    {\n        public const string LanguageDataSource = \"csharp;C#\\r\\njavascript;JavaScript\\r\\ntypescript;TypeScript\\r\\ncss;CSS\";\n\n        [DropDownComponent(Label = \"Language\", Order = 1, Options = LanguageDataSource)]\n        public string Language { get; set; } = \"csharp\";\n\n        [TextAreaComponent(Label = \"Code\", Order = 2)]\n        public string Code { get; set; }\n    }\n}"},"fieldIdentifiers":{"language":"f8e1c685-8a0b-4eae-b593-76f390ac203c","code":"ce3c115e-1713-47b1-96a4-161f6b087473"}}]},{"identifier":"7680f967-8be4-4ed0-b9f8-fde7e1baba1d","type":"Kentico.Widget.RichText","variants":[{"identifier":"afbcd3ae-4f41-4428-916e-1a4f5ed2c306","properties":{"content":"<p>At a quick glance, the new properties class looks very similar, but actually it has been simplified.</p><p>The first difference you'll notice is that we're no longer using the&nbsp;<strong>Kentico.Forms.Web.Mvc</strong> namespace, we're now using&nbsp;<strong>Kentico.Xperience.Admin.Base.FormAnnotations</strong> namespace to access the ReactJS editing components.</p><p>The biggest difference is the simplification of the attributes used on editing components. In Kentico Xperience 13, you controlled which component you want to use through a generic&nbsp;<strong>EditingComponent</strong> attribute, and then set properties for that component through the use of multiple&nbsp;<strong>EditingComponentProperty</strong> attributes. From my experience this was often messy, for example with a page selector that you want to control the starting root path and the maximum number of pages, you often ended up with attributes spanning&nbsp;<a href=\"https://docs.xperience.io/xp/developers-and-admins/upgrade-from-kentico-xperience-13/editing-components-in-xperience-by-kentico#EditingcomponentsinXperiencebyKentico-Pageselector\" rel=\"noopener noreferrer\" target=\"_blank\">5 or 6 lines</a>.</p><p>With the ReactJS editing components you get&nbsp;<a href=\"https://docs.xperience.io/xp/developers-and-admins/customization/extend-the-administration-interface/ui-form-components/reference-admin-ui-form-components\" rel=\"noopener noreferrer\" target=\"_blank\">dedicated attributes</a> for each control. For example,&nbsp;if you want a dropdown selector use the DropDownComponent attribute, or if you want a page selector use the PageSelectorComponent attribute. These dedicated attributes have all of their configurational properties included, you don't need to use separate attributes to control them.</p><p>I know I have mentioned the UI framework ReactJS quite a lot throughout this article and not really explained what it is, this is deliberate. You have seen a widget be converted from using classic editing components to use ReactJS editing components without even needing to know ReactJS at all! 🤯</p><p>This will be the case for most widgets you will create, for most scenarios you can utilise the wide range of&nbsp;<a href=\"https://docs.xperience.io/xp/developers-and-admins/customization/extend-the-administration-interface/ui-form-components/reference-admin-ui-form-components\" rel=\"noopener noreferrer\" target=\"_blank\">editing components</a> that Kentico already provide.&nbsp;If you think something important is missing, you can always submit it as an idea on the&nbsp;<a href=\"https://portal.productboard.com/kenticoxperience/1-kentico-xperience-roadmap/tabs/1-under-consideration\" rel=\"noopener noreferrer\" target=\"_blank\">roadmap</a> and it could be added in a future refresh!</p><p><br></p><hr><p><br></p><p><strong>WARNING!</strong> When you convert a widget to use the new editing components, you need to convert&nbsp;<strong>ALL&nbsp;</strong>properties for that widget. You cannot have a widget that contains a mixture of classic and ReactJS editing components, otherwise you'll get the following error:</p><p><strong>Message: The 'Goldfinch.Web.Components.Widgets.CodeBlock.CodeBlockWidgetProperties' properties class contains some properties that are annotated by admin form components and some properties annotated by builder components. The properties class must contain editable properties with the same type of component annotation.</strong></p>"},"fieldIdentifiers":{"content":"6cc9cfe2-32fd-4eee-aafe-d7079bb78de6"}}]},{"identifier":"78b3cdf7-c193-4600-a4ab-6f803f1e21ec","type":"Kentico.Widget.RichText","variants":[{"identifier":"8cb7d379-93aa-476e-b927-bd313397963d","properties":{"content":"<p><em id=\"isPasted\">This article was written using Xperience by Kentico version 22.1.0.</em></p>"},"fieldIdentifiers":{"content":"77e6df82-2208-4562-90bc-2fa53ebdceef"}}]}]}],"fieldIdentifiers":{}}]}]}]]>
  </ContentItemCommonDataVisualBuilderWidgets>
  <ContentItemReferences>
    <cms.contentitemreference>
      <ContentItemReferenceGroupGUID>3a1822b3-5144-4cd5-b48b-af9aa63881c1</ContentItemReferenceGroupGUID>
      <ContentItemReferenceGUID>ecf6ca57-afbf-4e99-a510-9bb512bc3600</ContentItemReferenceGUID>
      <ContentItemReferenceSourceCommonDataID>
        <GUID>c4b46830-f3bc-4b0d-a7bc-558858856d5d</GUID>
        <ObjectType>cms.contentitemcommondata</ObjectType>
      </ContentItemReferenceSourceCommonDataID>
      <ContentItemReferenceTargetItemID>
        <CodeName>EditingComponentsInXperienceByKentico-CodeBlockReactJS-qhmo7tan</CodeName>
        <GUID>c406cc15-2f4e-4848-990c-77c92098c016</GUID>
        <ObjectType>cms.contentitem</ObjectType>
      </ContentItemReferenceTargetItemID>
    </cms.contentitemreference>
    <cms.contentitemreference>
      <ContentItemReferenceGroupGUID>63443eec-c610-4c9b-a5c9-e7336393be55</ContentItemReferenceGroupGUID>
      <ContentItemReferenceGUID>9567e812-559a-4327-82b5-01ac64e4fc65</ContentItemReferenceGUID>
      <ContentItemReferenceSourceCommonDataID>
        <GUID>c4b46830-f3bc-4b0d-a7bc-558858856d5d</GUID>
        <ObjectType>cms.contentitemcommondata</ObjectType>
      </ContentItemReferenceSourceCommonDataID>
      <ContentItemReferenceTargetItemID>
        <CodeName>EditingComponentsInXperienceByKentico-CodeBlockClassic-51d70xal</CodeName>
        <GUID>b1f8ec33-24b9-4660-a39a-71ec7cead4d9</GUID>
        <ObjectType>cms.contentitem</ObjectType>
      </ContentItemReferenceTargetItemID>
    </cms.contentitemreference>
  </ContentItemReferences>
</cms.contentitemcommondata>