<?xml version="1.0" encoding="utf-8"?>
<cms.contentitemcommondata>
  <BaseContentShortDescription>
    <![CDATA[With Kentico MVC forms no longer resolving query string macros for default field values, let's figure out how to work around it!]]>
  </BaseContentShortDescription>
  <BaseContentTitle>Using default values in Kentico MVC Forms</BaseContentTitle>
  <ContentItemCommonDataContentItemID>
    <CodeName>UsingDefaultValuesInKenticoMVCForms-7yo82top</CodeName>
    <GUID>d016af13-2a35-4928-b300-a8c644ffc3a1</GUID>
    <ObjectType>cms.contentitem</ObjectType>
  </ContentItemCommonDataContentItemID>
  <ContentItemCommonDataContentLanguageID>
    <CodeName>en</CodeName>
    <GUID>22960170-5c33-4d4e-a01b-fd4c8fcbd13d</GUID>
    <ObjectType>cms.contentlanguage</ObjectType>
  </ContentItemCommonDataContentLanguageID>
  <ContentItemCommonDataGUID>8c8288d9-53a9-40e9-857b-31af98046632</ContentItemCommonDataGUID>
  <ContentItemCommonDataIsLatest>True</ContentItemCommonDataIsLatest>
  <ContentItemCommonDataLastPublishedWhen>2025-09-12 20:56:55Z</ContentItemCommonDataLastPublishedWhen>
  <ContentItemCommonDataVersionStatus>2</ContentItemCommonDataVersionStatus>
  <ContentItemCommonDataVisualBuilderWidgets>
    <![CDATA[{"editableAreas":[{"identifier":"BlogPost","sections":[{"identifier":"ca3c5834-6508-4120-beb2-b11fa13898ff","type":"Kentico.DefaultSection","properties":null,"zones":[{"identifier":"73184391-f8bd-4d73-b92d-bb03847e0970","name":null,"widgets":[{"identifier":"dc903153-36a6-49a6-b6bb-093388b2bd3a","type":"Kentico.Widget.RichText","conditionType":null,"variants":[{"identifier":"267ddf81-9816-40d8-af18-84aab9c257d0","name":null,"properties":{"content":"<p>In Kentico Portal Engine, the Form Builder functionality allows you to create forms for collecting data from your visitors. &nbsp;You can embed these forms on pages across your website using the on-line form webpart, on-line form widget, or using the embed tool within a rich text area.</p><p>A nice feature that comes with the form builder is having the ability to configure default values, or prepopulate field values through query strings using <a href=\"https://docs.kentico.com/k12sp/macro-expressions/macro-syntax\" rel=\"noopener noreferrer\" target=\"_blank\">query string macros</a> (e.g. <strong>{% QueryString.firstName #%}</strong> or<strong>&nbsp;{? firstName ?}</strong>). &nbsp;You can then direct visitors to these pages using carefully constructed URLs, so that text boxes are prepopulated with specific text, or dropdowns have default values that are set based on data being passed through from the previous page.</p><p>However, when it comes to Kentico MVC, the Form widget no longer resolves query string macros and therefore cannot be used to dynamically prepopulate field values out of the box. &nbsp;To work around this, I've found that the simplest way to replicate this feature is to add data attributes to fields and then use JavaScript to carry out the prepopulating of values. &nbsp;The approach I have taken is documented below in four simple steps.</p><p>Step 1 - Add a module class to the MVC project (e.g. <strong>GlobalEvents/FormBuilderConfigurationModule.cs</strong>)</p>"},"conditionTypeParameters":null,"fieldIdentifiers":{}}]},{"identifier":"0cc42714-c941-44eb-ae68-1a67e78af621","type":"Goldfinch.CodeBlockWidget","conditionType":null,"variants":[{"identifier":"911c6f1c-c804-4231-89d2-84a7a01539d0","name":null,"properties":{"language":"csharp","code":"using CMS;\r\nusing CMS.DataEngine;\r\nusing DancingGoat.GlobalEvents;\r\nusing Kentico.Forms.Web.Mvc;\r\nusing Kentico.Forms.Web.Mvc.Widgets;\r\nusing System;\r\n\r\n[assembly: RegisterModule(typeof(FormBuilderConfigurationModule))]\r\nnamespace DancingGoat.GlobalEvents\r\n{\r\n    public class FormBuilderConfigurationModule : Module\r\n    {\r\n        public FormBuilderConfigurationModule() : base(\"DancingGoat.FormBuilderConfigurationModule\")\r\n        {\r\n        }\r\n\r\n        protected override void OnInit()\r\n        {\r\n            base.OnInit();\r\n        }\r\n    }\r\n}"},"conditionTypeParameters":null,"fieldIdentifiers":{}}]},{"identifier":"f0f74898-6ff0-4979-8f24-113c748c32e0","type":"Kentico.Widget.RichText","conditionType":null,"variants":[{"identifier":"b3b96932-edeb-4f0d-b93a-1a7ddb5e15ce","name":null,"properties":{"content":"<p>Step 2 -&nbsp;<a href=\"https://docs.kentico.com/k12sp/developing-websites/form-builder-development/customizing-the-form-widget#CustomizingtheFormwidget-Contextuallymodifyingformmarkup\" rel=\"noopener noreferrer\" target=\"_blank\">Customise the form markup</a> by using the new global events, and adding data attributes for all fields within Kentico forms&nbsp;</p>"},"conditionTypeParameters":null,"fieldIdentifiers":{}}]},{"identifier":"bc29f144-c29d-4b05-9ba5-55861541383a","type":"Goldfinch.CodeBlockWidget","conditionType":null,"variants":[{"identifier":"b32ed475-02e1-41c8-84e0-0beac85b7676","name":null,"properties":{"language":"csharp","code":"using CMS;\r\nusing CMS.DataEngine;\r\nusing DancingGoat.GlobalEvents;\r\nusing Kentico.Forms.Web.Mvc;\r\nusing Kentico.Forms.Web.Mvc.Widgets;\r\nusing System;\r\n\r\n[assembly: RegisterModule(typeof(FormBuilderConfigurationModule))]\r\nnamespace DancingGoat.GlobalEvents\r\n{\r\n    public class FormBuilderConfigurationModule : Module\r\n    {\r\n        public FormBuilderConfigurationModule() : base(\"DancingGoat.FormBuilderConfigurationModule\")\r\n        {\r\n        }\r\n\r\n        protected override void OnInit()\r\n        {\r\n            base.OnInit();\r\n\r\n            FormFieldRenderingConfiguration.GetConfiguration.Execute += InjectMarkupIntoKenticoComponents;\r\n        }\r\n        \r\n        private static void InjectMarkupIntoKenticoComponents(object sender, GetFormFieldRenderingConfigurationEventArgs e)\r\n        {\r\n            // Only injects additional markup into default Kentico form components\r\n            if (!e.FormComponent.Definition.Identifier.StartsWith(\"Kentico\", StringComparison.InvariantCultureIgnoreCase))\r\n            {\r\n                return;\r\n            }\r\n\r\n            // Assigns additional attribute to fields for the field's codename.\r\n            AddFieldCodenameMarkup(e);\r\n        }\r\n\r\n        private static void AddFieldCodenameMarkup(GetFormFieldRenderingConfigurationEventArgs e)\r\n        {\r\n            e.Configuration.EditorHtmlAttributes[\"data-name-field\"] = e.FormComponent.BaseProperties.Name;\r\n        }\r\n    }\r\n}"},"conditionTypeParameters":null,"fieldIdentifiers":{}}]},{"identifier":"0af6a105-85d0-4d64-8200-8b88f0286bcf","type":"Kentico.Widget.RichText","conditionType":null,"variants":[{"identifier":"a0afcd04-6228-45c2-9348-eb33201630c2","name":null,"properties":{"content":"<p>Step 3 - Customise the Form widget's wrapper element by adding a target JavaScript class&nbsp;</p>"},"conditionTypeParameters":null,"fieldIdentifiers":{}}]},{"identifier":"0bccbfed-cb38-41e6-a797-52bff11c0306","type":"Goldfinch.CodeBlockWidget","conditionType":null,"variants":[{"identifier":"96de7464-3857-4a35-acfb-9dd4ed463fc6","name":null,"properties":{"language":"csharp","code":"using CMS;\r\nusing CMS.DataEngine;\r\nusing DancingGoat.GlobalEvents;\r\nusing Kentico.Forms.Web.Mvc;\r\nusing Kentico.Forms.Web.Mvc.Widgets;\r\nusing System;\r\n\r\n[assembly: RegisterModule(typeof(FormBuilderConfigurationModule))]\r\nnamespace DancingGoat.GlobalEvents\r\n{\r\n    public class FormBuilderConfigurationModule : Module\r\n    {\r\n        public FormBuilderConfigurationModule() : base(\"DancingGoat.FormBuilderConfigurationModule\")\r\n        {\r\n        }\r\n\r\n        protected override void OnInit()\r\n        {\r\n            base.OnInit();\r\n\r\n            SetGlobalRenderingConfigurations();\r\n\r\n            FormFieldRenderingConfiguration.GetConfiguration.Execute += InjectMarkupIntoKenticoComponents;\r\n        }\r\n\r\n        private static void SetGlobalRenderingConfigurations()\r\n        {\r\n            FormWidgetRenderingConfiguration.Default = new FormWidgetRenderingConfiguration\r\n            {\r\n                // Elements wrapping the Form element\r\n                FormWrapperConfiguration = new FormWrapperRenderingConfiguration\r\n                {\r\n                    ElementName = \"section\",\r\n                    HtmlAttributes = { { \"class\", \"js-bizform\" } },\r\n                }\r\n            };\r\n        }\r\n\r\n        private static void InjectMarkupIntoKenticoComponents(object sender, GetFormFieldRenderingConfigurationEventArgs e)\r\n        {\r\n            // Only injects additional markup into default Kentico form components\r\n            if (!e.FormComponent.Definition.Identifier.StartsWith(\"Kentico\", StringComparison.InvariantCultureIgnoreCase))\r\n            {\r\n                return;\r\n            }\r\n\r\n            // Assigns additional attribute to fields for the field's codename.\r\n            AddFieldCodenameMarkup(e);\r\n        }\r\n\r\n        private static void AddFieldCodenameMarkup(GetFormFieldRenderingConfigurationEventArgs e)\r\n        {\r\n            e.Configuration.EditorHtmlAttributes[\"data-name-field\"] = e.FormComponent.BaseProperties.Name;\r\n        }\r\n    }\r\n}"},"conditionTypeParameters":null,"fieldIdentifiers":{}}]},{"identifier":"9f246ae9-c2e1-46c4-8815-76e91d45cf74","type":"Kentico.Widget.RichText","conditionType":null,"variants":[{"identifier":"0320d97e-39a4-4587-b5e9-3a3ac6ebee7f","name":null,"properties":{"content":"<p>Step 4 - Bundle JavaScript with the out of the box Form widget to prepopulate fields based on query string values, this file should be added to&nbsp;<strong>Content/Widgets/KenticoForm/KenticoFormWidget.js</strong>&nbsp;</p>"},"conditionTypeParameters":null,"fieldIdentifiers":{}}]},{"identifier":"23a38088-79c2-432f-bd6f-b1b33c1751dc","type":"Goldfinch.CodeBlockWidget","conditionType":null,"variants":[{"identifier":"edbb64ab-0abd-4f34-b5b9-659fc77f191e","name":null,"properties":{"language":"javascript","code":"const bizform = document.querySelector('.js-bizform');\r\n\r\n// If there is a Kentico Form instance on the page\r\nif (bizform) {\r\n    // Get all query string values\r\n    const searchParams = new URL(document.location).searchParams;\r\n\r\n    // Loop over query strings\r\n    searchParams.forEach(function (value, key) {\r\n        // Check if the query string key matches a field name\r\n        const field = bizform.querySelector(`[data-name-field=\"${key}\"]`);\r\n\r\n        // If there is a match, store the value against the field\r\n        if (field) {\r\n            field.value = value;\r\n        }\r\n    });\r\n}"},"conditionTypeParameters":null,"fieldIdentifiers":{}}]},{"identifier":"c94e7b61-bf71-49bf-b6f6-b54635cd7816","type":"Kentico.Widget.RichText","conditionType":null,"variants":[{"identifier":"052e2b81-40bb-4401-9d98-d4830fdd2726","name":null,"properties":{"content":"<p>With all this in place on the Dancing Goat sample site, you can now visit the URL&nbsp;<strong>http://localhost:8080/en-US/Contacts?UserFirstName=Liam&amp;UserLastName=Goldfinch</strong> and my name will be prepopulated into the first name and last name fields of the contact form. &nbsp;If you inspect the form using your browser's devtools or view page source, you should be able to see the data attributes on each field that you can use to generate your own URLs.&nbsp;</p>"},"conditionTypeParameters":null,"fieldIdentifiers":{}}]}]}]}]}]}]]>
  </ContentItemCommonDataVisualBuilderWidgets>
</cms.contentitemcommondata>