<?xml version="1.0" encoding="utf-8"?>
<cms.contentitemcommondata>
  <ContentItemCommonDataContentItemID>
    <CodeName>TheKenticoSaaSMigration_LessonsLearnedAndTroubleshootingTips-w2gxqvic</CodeName>
    <GUID>b25c6f3f-c1d2-404d-8a2a-4862f8acfe69</GUID>
    <ObjectType>cms.contentitem</ObjectType>
  </ContentItemCommonDataContentItemID>
  <ContentItemCommonDataContentLanguageID>
    <CodeName>en</CodeName>
    <GUID>22960170-5c33-4d4e-a01b-fd4c8fcbd13d</GUID>
    <ObjectType>cms.contentlanguage</ObjectType>
  </ContentItemCommonDataContentLanguageID>
  <ContentItemCommonDataFirstPublishedWhen>2025-04-29 20:28:39Z</ContentItemCommonDataFirstPublishedWhen>
  <ContentItemCommonDataGUID>86f0b1ba-2059-4f47-9ad7-989f58477c14</ContentItemCommonDataGUID>
  <ContentItemCommonDataIsLatest>True</ContentItemCommonDataIsLatest>
  <ContentItemCommonDataLastPublishedWhen>2025-08-22 20:13:11Z</ContentItemCommonDataLastPublishedWhen>
  <ContentItemCommonDataVersionStatus>2</ContentItemCommonDataVersionStatus>
  <ContentItemCommonDataVisualBuilderTemplateConfiguration />
  <ContentItemCommonDataVisualBuilderWidgets>
    <![CDATA[{"editableAreas":[{"identifier":"BlogPost","sections":[{"identifier":"9b72af3a-2eef-4e2e-8a2c-9d1fa175b3ed","type":"Kentico.DefaultSection","properties":null,"zones":[{"identifier":"854f64ad-99d8-46c9-8fef-381c6b385a98","widgets":[{"identifier":"5badd0f4-956d-45b3-9a66-09e3f3204b5f","type":"Kentico.Widget.RichText","variants":[{"identifier":"83568e53-d688-47d4-b793-5ade5e68e069","properties":{"content":"<p>In <a href=\"~/blog/the-kentico-saas-migration-a-step-by-step-guide\" target=\"_blank\" rel=\"noopener noreferrer\">Part 1</a>, I walked through migrating my Xperience by Kentico site from self-hosted to SaaS. ✅</p><p>In <a href=\"~/blog/the-kentico-saas-migration-automated-deployments\" target=\"_blank\" rel=\"noopener noreferrer\">Part 2</a>, I set up automated deployments using Azure DevOps to streamline the process. ✅</p><p>In this final part, I’m sharing the lessons I learned, the gotchas I encountered, and the troubleshooting tips that helped me work through them. These insights come not just from this migration, but also from working on SaaS projects with the wider team at <a href=\"https://www.idhlagency.com/\" target=\"_blank\" rel=\"noopener noreferrer\">IDHL</a>. Hopefully, they'll help save you some time or at least a bit of frustration.</p><p><strong>🧩 Content Authoring During Development</strong></p><p>One of the first challenges was figuring out how content editors and testers can safely make changes in environments where developers are actively building and deploying features.</p><p>When using Continuous Deployment (CD), having the correct configuration is key. It's easy to forget to adjust it, push a deployment to QA, and boom 💥 the testers work gets overwritten by local dev content.</p><p>My tip: clear communication is vital. Everyone should know when a deployment is happening, and whether it might overwrite content. If you're new to CD configuration files, have a teammate review your setup and suggest improvements.</p><p>One more thing, real content should be added directly in the production environment, at least until <a href=\"https://roadmap.kentico.com/c/163-content-sync-xbyk-s-answer-to-content-staging-phase-1-content-items\" target=\"_blank\" rel=\"noopener noreferrer\">Content Sync</a> is released in one of the upcoming refreshes.</p><p><strong>🆕 Applying Refreshes</strong></p><p>If you're using a seeding database, either with Continuous Integration (CI) or a pipeline like the one I showed in <a href=\"~/blog/the-kentico-saas-migration-automated-deployments\" target=\"_blank\" rel=\"noopener noreferrer\">Part 2</a>, make sure it's updated after applying each Refresh.</p><p>If not, your automated pipeline, or any new developer setting up locally, may run into a version mismatch error like this:</p>"},"fieldIdentifiers":{"content":"c85b9732-c089-491c-b5cd-00982c15a6ff"}}]},{"identifier":"d249588e-9322-410f-951e-5dd2f40c43c9","type":"Goldfinch.CodeBlockWidget","variants":[{"identifier":"2e64a6f2-7daf-4e1f-8758-bb0e759b88ca","properties":{"language":"csharp","code":"fail: Kentico.Web.Mvc.IStartupConfigureAction[0]\n      Startup action 'Kentico.Web.Mvc.CIRestoreService'.\n      System.NotSupportedException: Xperience Continuous Integration or Deployment can run only on same version as '30.3.0'.\n         at Kentico.Web.Mvc.CICDServiceDatabaseVersionChecker.ThrowException(Version assemblyVersion)\n         at Kentico.Web.Mvc.CICDServiceDatabaseVersionChecker.IsMatch(Version dbVersion)\n         at CMS.DataEngine.CMSApplication.Init()\n         at Kentico.Web.Mvc.StartupConfigureActionBase.InitCmsApplication()\n         at Kentico.Web.Mvc.StartupConfigureActionBase.Initialize()\n         at Kentico.Web.Mvc.ExitCodeService.Initialize()"},"fieldIdentifiers":{"language":"c9373046-5514-4a74-ac2f-cdd173b9c011","code":"74445952-e3ab-466f-9304-b089b009f4ea"}}]},{"identifier":"10a65336-4c9e-4de6-ba5f-ac344a6c6c5c","type":"Kentico.Widget.RichText","variants":[{"identifier":"25e8ce15-0a8a-4bd1-aded-03dca797da10","properties":{"content":"<p>My tip: make sure all developers understand how important it is to keep the seeding database up to date. If you're reviewing a pull request that includes a hotfix or refresh, double check whether the updated database file is included too.</p><p><strong>1️⃣ The Initial Deployment</strong></p><p>If you're migrating a website from self-hosted to SaaS, your first deployment package is likely to be large, especially if you're including all the site code, media, and assets. This can easily push you over the <strong>2GB</strong> limit for SaaS deployment packages.</p><p>Kentico does plan to improve this in the future. But for now, if you do exceed the limit, you'll need to contact Kentico Support to manually import the package.</p><p>My tip: after your initial deployment, take time to review your CD configuration file. Only include what's truly needed in future packages. You can also break down deployments into smaller chunks, for example start with just the essentials object types and then include more with follow up deployments.</p><p><strong>💾 Update Your .gitignore File</strong></p><p>If you're new to CI/CD as part of moving to SaaS, you'll need to be extra careful about what gets committed to source control.</p><p>As covered in <a href=\"~/blog/the-kentico-saas-migration-automated-deployments\" target=\"_blank\" data-channel-guid=\"b3f8d8a7-ead7-433c-b0fb-225567a185c3\" rel=\"noopener noreferrer\">Part 2</a>, the CD configuration file should be committed, but the CD output files should not.</p><p>Make sure you exclude the output directory from source control.</p><p><strong>⚠️ Check For Legacy Files</strong></p><p>I had a leftover <strong>web.config</strong> file from my self-hosted setup that was setting the <strong>ASPNETCORE_ENVIRONMENT</strong> value.</p><p>On my first SaaS deployment, that setting overwrote the SaaS environment config, which broke the database connection string in QA and caused a lot of confusion! 😕</p><p>My tip: audit your config files and make sure you've removed anything you no longer need.</p><p>While you're there, updated your environment specific appsettings files to match your new SaaS environments, <strong>appsettings.Production.json</strong>, <strong>appsettings.Qa.json</strong>, or <strong>appsettings.Uat.json</strong>.</p><p><strong>#️⃣ Re-sign Your Macros</strong></p><p>Remember, in <a href=\"~/blog/the-kentico-saas-migration-a-step-by-step-guide\" target=\"_blank\" rel=\"noopener noreferrer\">Part 1</a> we updated the <strong>CMSHashStringSalt</strong> to match the one provided in the Xperience Portal.</p><p>You'll also <strong>need</strong> to re-sign your macros, otherwise things in the admin UI will start to break in subtle ways.</p><p>I forgot to do this on my first deployment, and I only realised when the Edit Page button suddenly stopped working.</p><p>My tip: re-sign them straight away using the following command:</p>"},"fieldIdentifiers":{"content":"ef976bd2-e5c4-495a-977d-5f541e07912d"}}]},{"identifier":"76d7f848-3503-45e9-8c6b-eb0cb78b01bb","type":"Goldfinch.CodeBlockWidget","variants":[{"identifier":"37a7b294-2c11-46c6-abfa-a400039515b5","properties":{"language":"bash","code":"dotnet run --no-build -- --kxp-resign-macros --old-salt \"Old_Salt\" --new-salt \"New_Salt\""},"fieldIdentifiers":{"language":"fe37735b-9b49-4c40-8876-c0662d235bfd","code":"8176a566-2534-46a8-8017-9202d44040c6"}}]},{"identifier":"31d1fc8b-ab1b-4d6a-abfb-628497c39082","type":"Kentico.Widget.RichText","variants":[{"identifier":"56baec6f-fcf7-466b-a5cd-4376d7d44a51","properties":{"content":"<p><strong>💥 Custom Modules and Community Packages</strong></p><p>My blog uses an open-source package I built for the community: <a href=\"https://github.com/liamgold/xperience-community-csp-management\" target=\"_blank\" rel=\"noopener noreferrer\">Content Security Policy (CSP) Management</a>. It works well, but it tries to install a scheduled task as soon as the site boots up.</p><p>On my first SaaS deployment, the database hadn't finished restoring before the CSP module tried to install the task. This would have been hard to diagnose without access to the event logs in the Xperience Portal.</p><p>I downloaded the deployment logs and immediately stopped the problem, the required database tables didn't exist yet! 🤭</p><p>My tip: check the event logs for deployment failures, they are incredibly useful.</p><p>Also, if you run into issues with community packages, raise an issue in the GitHub repository. Someone in the community (or the author) will likely get around to addressing it.</p><p>In my case, I temporarily uninstalled the NuGet package for the first deployment, and then reinstalled it in the next one. 👏</p><p><strong>☁️ Cloudflare WAF</strong></p><p>I'm glad Kentico chose to use Cloudflare for SaaS, it's also our default recommendation for clients at <a href=\"https://www.idhlagency.com/\" target=\"_blank\" rel=\"noopener noreferrer\">IDHL</a>.</p><p>It works really well, but depending on your configuration, you might accidentally block legitimate requests with some of the WAF rules.</p><p>When I first deployed to SaaS, everything looked great, until I opened one blog post in particular in Page Builder mode.</p><p>Cloudflare WAF was blocking one of the widgets because it detected suspicious markup. It was a bit inconvenient, but it is also reassuring that the WAF was clearly doing its job.</p><p>Luckily, you can grab the Cloudflare Ray ID from your browser's network tab and send to Kentico Support. They'll review the logs, and make any necessary adjustments to rules.</p><p><strong>Wrapping It Up</strong></p><p>Kentico SaaS takes a lot of the infrastructure and maintenance burden off your plate, but it does introduce a few new habits and adjustments along the way.</p><p>Once you've figured it out, it becomes a smooth, repeatable, low stress progression from a self-hosted setup.</p><p>And that wraps up my <strong>Kentico SaaS Migration</strong> series - for now? 🤔</p><p>My SaaS trial is coming to an end, but I'll continue blogging about Kentico SaaS with learnings from future project work.</p>"},"fieldIdentifiers":{"content":"7964935c-3e64-4b26-8230-1c00fef25d52"}}]}]}],"fieldIdentifiers":{}}]}]}]]>
  </ContentItemCommonDataVisualBuilderWidgets>
  <ContentItemReferences>
    <cms.contentitemreference>
      <ContentItemReferenceGroupGUID>ef976bd2-e5c4-495a-977d-5f541e07912d</ContentItemReferenceGroupGUID>
      <ContentItemReferenceGUID>4b6d95d0-6020-47ef-8c9b-375f05160789</ContentItemReferenceGUID>
      <ContentItemReferenceSourceCommonDataID>
        <GUID>86f0b1ba-2059-4f47-9ad7-989f58477c14</GUID>
        <ObjectType>cms.contentitemcommondata</ObjectType>
      </ContentItemReferenceSourceCommonDataID>
      <ContentItemReferenceTargetItemID>
        <CodeName>TheKenticoSaaSMigration_AutomatedDeployments-by4jr9lw</CodeName>
        <GUID>d3bb8ad3-f248-456d-971b-da6ffd4bc94c</GUID>
        <ObjectType>cms.contentitem</ObjectType>
      </ContentItemReferenceTargetItemID>
    </cms.contentitemreference>
  </ContentItemReferences>
</cms.contentitemcommondata>