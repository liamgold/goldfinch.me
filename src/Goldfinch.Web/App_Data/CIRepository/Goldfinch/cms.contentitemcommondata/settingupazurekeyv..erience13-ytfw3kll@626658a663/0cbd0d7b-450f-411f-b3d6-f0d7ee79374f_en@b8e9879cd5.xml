<?xml version="1.0" encoding="utf-8"?>
<cms.contentitemcommondata>
  <ContentItemCommonDataContentItemID>
    <CodeName>SettingUpAzureKeyVaultInKenticoXperience13-ytfw3kll</CodeName>
    <GUID>6e601fe6-fa79-40ed-9c2a-02256aa0be6d</GUID>
    <ObjectType>cms.contentitem</ObjectType>
  </ContentItemCommonDataContentItemID>
  <ContentItemCommonDataContentLanguageID>
    <CodeName>en</CodeName>
    <GUID>22960170-5c33-4d4e-a01b-fd4c8fcbd13d</GUID>
    <ObjectType>cms.contentlanguage</ObjectType>
  </ContentItemCommonDataContentLanguageID>
  <ContentItemCommonDataGUID>0cbd0d7b-450f-411f-b3d6-f0d7ee79374f</ContentItemCommonDataGUID>
  <ContentItemCommonDataIsLatest>True</ContentItemCommonDataIsLatest>
  <ContentItemCommonDataVersionStatus>2</ContentItemCommonDataVersionStatus>
  <ContentItemCommonDataVisualBuilderWidgets>
    <![CDATA[{"editableAreas":[{"identifier":"BlogPost","sections":[{"identifier":"e3684cec-c44f-40bd-8dd9-1a7328d95192","type":"Kentico.DefaultSection","properties":null,"zones":[{"identifier":"d7873fd0-c005-4755-aad0-f482bd071c28","name":null,"widgets":[{"identifier":"c92b11bf-bb85-4d7b-a016-70cb43024ae4","type":"Kentico.Widget.RichText","conditionType":null,"variants":[{"identifier":"4eb2b9f5-449b-4253-939a-1aa782e3cf3a","name":null,"properties":{"content":"<p id=\"isPasted\">Azure Key Vault is a cloud-based service designed to secure sensitive information, keys, and secrets that should&nbsp;not be hardcoded into your applications.</p><p>It proves particularly valuable when you need to store and manage items like database connection strings, API keys, or any other confidential information you wish to protect. Let’s take a look at how to configure Kentico Xperience 13 to work with Azure Key Vault.</p><p><strong>Presentation website – ASP.NET Core</strong></p><p>Considering the substantial emphasis on security in modern times, it's unsurprising to discover a huge number of online resources related to Azure Key Vault and ASP.NET Core. There are plenty of online tutorials and code samples across several platforms and programming languages.</p><p>When implementing Azure Key Vault for ASP.NET Core websites, I typically follow this&nbsp;<a href=\"https://learn.microsoft.com/en-us/aspnet/core/security/key-vault-configuration?view=aspnetcore-6.0#use-managed-identities-for-azure-resources\" rel=\"noopener noreferrer\" target=\"_blank\">example</a> provided by Microsoft. This guide explains how to configure an ASP.NET Core application to use managed identities to authenticate and access secrets from Azure Key Vault. This is perfect for setting up Azure Key Vault with Kentico Xperience 13 presentation websites. The implementation focuses around installing the following NuGet packages and using the extension method to register the Key Vault instance.</p><ul><li>Azure.Extensions.AspNetCore.Configuration.Secrets</li><li>Azure.Identity</li><li>Azure.Security.KeyVault.Secrets</li></ul><p>An example implementation I have used recently (not using the new minimal hosting model) is below:</p>"},"conditionTypeParameters":null,"fieldIdentifiers":{"content":"89a58d0b-75c3-4084-9287-8603c22e194c"}}]},{"identifier":"e90386f3-d542-47e4-84e6-01b016d324dd","type":"Goldfinch.CodeBlockWidget","conditionType":null,"variants":[{"identifier":"3e1d117a-bdb7-41f8-8591-ea8fe2e436a5","name":null,"properties":{"language":"csharp","code":"                .ConfigureAppConfiguration((context, config) =>\n                {\n                    if (context.HostingEnvironment.IsProduction() || context.HostingEnvironment.IsUAT())\n                    {\n                        var builtConfig = config.Build();\n\n                        var keyVaultUrl = $\"https://{builtConfig[\"KeyVaultName\"]}.vault.azure.net/\";\n\n                        var secretClient = new SecretClient(\n                            new Uri(keyVaultUrl),\n                            new DefaultAzureCredential());\n\n                        config.AddAzureKeyVault(secretClient, new KeyVaultSecretManager());\n                    }\n                })"},"conditionTypeParameters":null,"fieldIdentifiers":{"language":"c6cb4a9b-02e2-4237-975d-9c1305f729e6","code":"c8bcf860-9a4a-4706-8a63-f15962186b9c"}}]},{"identifier":"08549126-cd61-47d3-abea-9864f3fb8868","type":"Kentico.Widget.RichText","conditionType":null,"variants":[{"identifier":"13f2d0ce-f059-44a3-9680-dccaa02b2369","name":null,"properties":{"content":"<p id=\"isPasted\"><strong>Administration website - ASP.NET Web Forms</strong></p><p>A slightly more challenging task when setting up Azure Key Vault for Kentico Xperience 13 is configuring the administration portal. The challenge stems from the admin portal being built on older ASP.NET Web Forms technology, making it less straightforward to find relevant resources to set up the configuration.</p><p>I found that the most straightforward approach of connecting the admin site with Azure Key Vault was through creating a custom implementation of the IConnectionStringService and IAppSettingsService interfaces.</p><p>In my custom implementations I offer a fall-back option to Kentico, by checking for the appropriate connection string or app setting in Azure Key Vault. This only happens if a value isn't found within the usual locations, I would then perform a lookup in Azure Key Vault and try to retrieve the necessary secret.</p><p>Let's take a look at some of the code! 👀</p><p>Both of these implementations are based on the default Kentico services, and both use the following methods for accessing Key Vault secrets:</p>"},"conditionTypeParameters":null,"fieldIdentifiers":{"content":"fb4fd9dc-6323-472e-b6fb-db20d77213b4"}}]},{"identifier":"038ada86-bfd2-4a02-8078-d8047ec16b7f","type":"Goldfinch.CodeBlockWidget","conditionType":null,"variants":[{"identifier":"9a13c31d-92d2-408d-9346-a20a0936af31","name":null,"properties":{"language":"csharp","code":"        private static async Task<SecretBundle> GetSecretFromKeyVaultAsync(KeyVaultClient keyVaultClient, string secretName)\n        {\n            var keyVaultName = ConfigurationManager.AppSettings[\"KeyVaultName\"];\n            var keyVaultUrl = $\"https://{keyVaultName}.vault.azure.net/\";\n\n            try\n            {\n                var secretIdentifier = $\"{keyVaultUrl}secrets/{secretName}\";\n                return await keyVaultClient.GetSecretAsync(secretIdentifier);\n            }\n            catch (KeyVaultErrorException ex)\n            {\n                // Handle any exception occurred during the secret retrieval process.\n                Console.WriteLine($\"Error retrieving secret: {ex.Message}\");\n                return null;\n            }\n        }\n\n        private static async Task<string> GetAccessTokenAsync(string authority, string resource, string scope)\n        {\n            var azureServiceTokenProvider = new AzureServiceTokenProvider();\n            return await azureServiceTokenProvider.GetAccessTokenAsync(resource);\n        }"},"conditionTypeParameters":null,"fieldIdentifiers":{"language":"eb03ad1f-457f-4079-8bc1-29ff6ad0adf8","code":"0c3cefaf-e41d-4590-9c7c-098c0992853b"}}]},{"identifier":"6ee6370c-05ca-415e-84bf-982f9bf46b25","type":"Kentico.Widget.RichText","conditionType":null,"variants":[{"identifier":"5855b6f2-485a-480d-bb53-d46dc902ea3b","name":null,"properties":{"content":"<p id=\"isPasted\"><strong>GetSecretFromKeyVaultAsync</strong> provides the custom services a simple method for retrieving secrets from the key vault and returning the <strong>SecretBundle&nbsp;</strong>to the caller, which contains the secret value inside.</p><p><strong>GetAccessTokenAsync</strong> is another simple method that generates an access token for the given resource, this is important as it is required to authenticate the admin site with the Azure Key Vault instance.</p><p>Next we'll look at how I'm using these methods to look up a connection string in the custom IConnectionStringService implementation.</p>"},"conditionTypeParameters":null,"fieldIdentifiers":{"content":"4a1644bc-625d-4f49-9aa2-77de1e451b66"}}]},{"identifier":"b5ba6666-3ad9-471f-9ee1-15e1ea6f42f1","type":"Goldfinch.CodeBlockWidget","conditionType":null,"variants":[{"identifier":"504841c2-17d2-4e65-a5a8-0db69a3563f6","name":null,"properties":{"language":"csharp","code":"        /// <summary>\n        /// Gets the specific connection string from the app config\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\n        /// </summary>\n        public string this[string name]\n        {\n            get\n            {\n                // Get connection string\n                var connString = SettingsHelper.ConnectionStrings[name];\n                if (connString == null)\n                {\n                    if (!name.Equals(\"CMSConnectionString\", StringComparison.InvariantCultureIgnoreCase))\n                    {\n                        return null;\n                    }\n\n                    return GetAzureKeyVaultConnectionString();\n                }\n\n                return connString.ConnectionString;\n\t\t\t\t\t\t\t\t\t\t\t\t\t   \n            }\n            set\n            {\n                if (String.IsNullOrEmpty(name))\n                {\n                    throw new ArgumentException(nameof(name));\n                }\n\n                SettingsHelper.ConnectionStrings[name] = new ConnectionStringSettings(name, value);\n            }\n        }\n\n        private string GetAzureKeyVaultConnectionString()\n        {\n            var keyVaultClient = new KeyVaultClient(new KeyVaultClient.AuthenticationCallback(GetAccessTokenAsync));\n\n            var connectionString = Task.Run(() => GetSecretFromKeyVaultAsync(keyVaultClient, \"ConnectionStrings--CMSConnectionString\")).GetAwaiter().GetResult();\n\n            var connectionStringValue = connectionString?.Value;\n\n            if (!string.IsNullOrWhiteSpace(connectionStringValue))\n            {\n                return connectionStringValue;\n            }\n\n            return null;\n        }"},"conditionTypeParameters":null,"fieldIdentifiers":{"language":"53baba79-592b-4c0d-925e-1bc4f5bf44df","code":"9b6d0277-901c-466f-abb1-cfa55bee3d6a"}}]},{"identifier":"9fcdec10-468f-44a0-b3c1-fd985f205fd5","type":"Kentico.Widget.RichText","conditionType":null,"variants":[{"identifier":"666f891d-7f40-4150-ae4c-bc9aa7bc9c9b","name":null,"properties":{"content":"<p id=\"isPasted\">I start by amending Kentico's default indexer property, if there isn't a <strong>CMSConnectionString</strong> already added, then we call the new method <strong>GetAzureKeyVaultConnectionString</strong>. This method calls the previous methods to authenticate and retrieve the <strong>ConnectionStrings--CMSConnectionString</strong> secret from Azure Key Vault which contains our database connection string.</p><p>Now we'll look at how I customised the AppSettingsService.</p>"},"conditionTypeParameters":null,"fieldIdentifiers":{"content":"6edded92-24d9-4ee6-a7f2-d09b1905393a"}}]},{"identifier":"3152499f-e259-49f9-ba56-4174ad322ba5","type":"Goldfinch.CodeBlockWidget","conditionType":null,"variants":[{"identifier":"628b5733-6fe7-4a17-9428-d4ed854f0eda","name":null,"properties":{"language":"csharp","code":"        // Added a whitelist of app settings so we're only looking up keys we want to.\n        private static readonly HashSet<string> WhiteListedAppSettings = new HashSet<string>(StringComparer.OrdinalIgnoreCase)\n        {\n            \"CMSAzureAccountName\",\n            \"CMSAzureSharedKey\",\n        };\n\n        /// <summary>\n        /// Gets the specific settings from the application configuration file or from a memory.\n        /// Sets a specific settings with a value into a memory.\n        /// </summary>\n        public string this[string key]\n        {\n            get\n            {\n                var appSetting = SettingsHelper.AppSettings[key];\n                if (appSetting == null)\n                {\n                    if (!WhiteListedAppSettings.Contains(key))\n                    {\n                        return null;\n                    }\n\n                    return GetAzureKeyVaultAppSetting(key);\n                }\n\n\n                return SettingsHelper.AppSettings[key];\n            }\n            set\n            {\n                SettingsHelper.AppSettings[key] = value;\n            }\n        }\n\n        private string GetAzureKeyVaultAppSetting(string key)\n        {\n            var keyVaultClient = new KeyVaultClient(new KeyVaultClient.AuthenticationCallback(GetAccessTokenAsync));\n\n            var appSetting = Task.Run(() => GetSecretFromKeyVaultAsync(keyVaultClient, key)).GetAwaiter().GetResult();\n\n            var appSettingValue = appSetting?.Value;\n\n            if (!string.IsNullOrWhiteSpace(appSettingValue))\n            {\n                return appSettingValue;\n            }\n\n            return null;\n        }"},"conditionTypeParameters":null,"fieldIdentifiers":{"language":"33751926-9c41-4c47-a53f-6b644299307e","code":"9039d221-e3df-436c-88ae-ba3e6b04b305"}}]},{"identifier":"c99aaf4a-ff70-4e23-bd73-b068ea1811c5","type":"Kentico.Widget.RichText","conditionType":null,"variants":[{"identifier":"0491dd44-f651-4192-a368-09c316d81ecb","name":null,"properties":{"content":"<p id=\"isPasted\">Similar to the connection string example, I am changing Kentico's default indexer property, but this time I'm restricting the keys that we want to look up - to those that are stored within the white list.&nbsp;<strong>GetAzureKeyVaultAppSetting</strong> only really differs to&nbsp;<strong>GetAzureKeyVaultConnectionString</strong> in that it accepts a key as a parameter and then uses that to do the look up in Azure Key Vault.</p><p>You can find the full example code for both custom service implementations in&nbsp;<a href=\"https://gist.github.com/liamgold/13cba1617d3dfebead81f4d9ccb570fd\" rel=\"noopener noreferrer\" target=\"_blank\">this gist</a>.</p><p><strong>The future – Xperience by Kentico</strong></p><p>The challenges mentioned here for Kentico Xperience 13 are a thing of the past with Xperience by Kentico. Xperience by Kentico is developed using the latest ASP.NET Core versions and seamlessly integrates the administration portal with the presentation website (added through a NuGet package). Now we can follow the many tutorials and code samples that are available for ASP.NET Core for both our administration portal and the presentation website!</p>"},"conditionTypeParameters":null,"fieldIdentifiers":{"content":"a7092366-92fb-4be3-a21f-7df294139c45"}}]}]}]}]}]}]]>
  </ContentItemCommonDataVisualBuilderWidgets>
</cms.contentitemcommondata>