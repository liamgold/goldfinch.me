<?xml version="1.0" encoding="utf-8"?>
<cms.contentitemcommondata>
  <BaseContentShortDescription>
    <![CDATA[How does code generation work for generating classes for your page types?]]>
  </BaseContentShortDescription>
  <BaseContentTitle>
    <![CDATA[Page type code generation with Xperience by Kentico]]>
  </BaseContentTitle>
  <ContentItemCommonDataContentItemID>
    <CodeName>PageTypeCodeGenerationWithXperienceByKentico-gxmpps8b</CodeName>
    <GUID>dbc7d59d-aa27-4ec0-82d6-af800d0f2141</GUID>
    <ObjectType>cms.contentitem</ObjectType>
  </ContentItemCommonDataContentItemID>
  <ContentItemCommonDataContentLanguageID>
    <CodeName>en</CodeName>
    <GUID>22960170-5c33-4d4e-a01b-fd4c8fcbd13d</GUID>
    <ObjectType>cms.contentlanguage</ObjectType>
  </ContentItemCommonDataContentLanguageID>
  <ContentItemCommonDataGUID>d8344b25-1017-4683-8a14-223545be0d47</ContentItemCommonDataGUID>
  <ContentItemCommonDataIsLatest>True</ContentItemCommonDataIsLatest>
  <ContentItemCommonDataLastPublishedWhen>2025-09-12 20:54:50Z</ContentItemCommonDataLastPublishedWhen>
  <ContentItemCommonDataVersionStatus>2</ContentItemCommonDataVersionStatus>
  <ContentItemCommonDataVisualBuilderWidgets>
    <![CDATA[{"editableAreas":[{"identifier":"BlogPost","sections":[{"identifier":"17d0ea29-9663-4728-acf2-73fc0bcaa70a","type":"Kentico.DefaultSection","properties":null,"zones":[{"identifier":"938252af-f759-47d2-88de-7694dc3b6aad","widgets":[{"identifier":"63548a23-44ba-4436-9f2f-9046be087b1e","type":"Kentico.Widget.RichText","variants":[{"identifier":"7e82b976-8a08-4f28-9038-7466224c30b2","properties":{"content":"<p>How does code generation work for generating classes for your page types?</p><p>Working with strongly typed objects for page types has always been a preference for Kentico Xperience developers. &nbsp;Nobody wants to work with a TreeNode directly, right? &nbsp;You want a class that inherits from TreeNode, contains all the page type fields, and uses the correct data types throughout.</p><p>In previous versions of Kentico Xperience, we were provided with a few different ways of generating strongly typed classes. &nbsp;In all scenarios, you had to authenticate with the administration portal and navigate to the Page Types module. &nbsp;From there you could either copy and paste the individual generated classes or click a button to save them to a folder within the project.</p><p>Xperience by Kentico, being the next generation of Kentico Xperience, wanted to improve and build upon this key piece of developer functionality. &nbsp;Since Xperience by Kentico is entirely rewritten in .NET Core, it is more appropriate that the new code generation tool sits outside of the administration portal and is access through a <a href=\"https://docs.microsoft.com/en-us/dotnet/core/tools/\" rel=\"noopener noreferrer\" target=\"_blank\">.NET CLI</a> command.</p><p>The new .NET CLI command is so simple to use and was extremely useful when migrating my blog website to Xperience by Kentico. &nbsp;If I created or edited a page type, I just opened PowerShell and reran the same command:</p>"},"fieldIdentifiers":{"content":"0baa5560-f20f-4324-abe8-b0768db523bb"}}]},{"identifier":"6179d1b4-51b3-446b-b3cd-ddf8df130f51","type":"Goldfinch.CodeBlockWidget","variants":[{"identifier":"2d7875cd-8236-40e7-a197-8bc0956870a6","properties":{"language":"csharp","code":"dotnet run --no-build -- --kxp-codegen --type \"All\" --location \"../Goldfinch.Core/{type}/{dataClassNamespace}/{name}/\""},"fieldIdentifiers":{"language":"761597b5-16e2-4cc1-becc-04834bf7c074","code":"9e9b50e6-72c9-4e2d-a7ad-41e64ddca7df"}}]},{"identifier":"c5bbcd98-a18d-4fbf-a173-28b307db3745","type":"Kentico.Widget.RichText","variants":[{"identifier":"ac8368b0-e967-400c-8626-a911d8f255df","properties":{"content":"<p>The example above would generate all page type classes, without rebuilding the project first. &nbsp; The last parameter for location allowed me to customize where the generated class files were placed in my project. &nbsp;The CLI command comes with other options for including or excluding objects based on patterns, skipping the confirmation warning message, and customizing the namespaces of the files being generated.</p><p>If you need any further help getting started with the code generation tool, then I would highly recommend checking the documentation page. &nbsp;It covers all aspects of the code generation tool and provides explanations and examples for each of the parameters available.</p>"},"fieldIdentifiers":{"content":"b2658213-8653-44f9-b344-8869dd419f9a"}}]},{"identifier":"245f000f-10c1-4e89-8d3c-869e634d5bc5","type":"Goldfinch.ImageWidget","variants":[{"identifier":"c967af49-d356-415d-bd76-f24dd07e5760","properties":{"selectedAssets":[{"identifier":"9a3cc714-e8ca-4612-a4da-e7822e2827c7"}],"image":[],"description":""},"fieldIdentifiers":{"selectedAssets":"11086ced-0eee-42c2-8ccc-4219f0d21e0d","image":"0e8be3ab-24b4-429c-bb5f-e23ac1ecc961","description":"6842ad0b-aa0f-432c-ae17-8ea296ed0ccd"}}]}]}],"fieldIdentifiers":{}}]}]}]]>
  </ContentItemCommonDataVisualBuilderWidgets>
  <ContentItemReferences>
    <cms.contentitemreference>
      <ContentItemReferenceGroupGUID>11086ced-0eee-42c2-8ccc-4219f0d21e0d</ContentItemReferenceGroupGUID>
      <ContentItemReferenceGUID>633aea06-2dae-4d11-88b8-6912391fd038</ContentItemReferenceGUID>
      <ContentItemReferenceSourceCommonDataID>
        <GUID>d8344b25-1017-4683-8a14-223545be0d47</GUID>
        <ObjectType>cms.contentitemcommondata</ObjectType>
      </ContentItemReferenceSourceCommonDataID>
      <ContentItemReferenceTargetItemID>
        <CodeName>PageTypeCodeGeneration-PowerShell-9dr0n629</CodeName>
        <GUID>9a3cc714-e8ca-4612-a4da-e7822e2827c7</GUID>
        <ObjectType>cms.contentitem</ObjectType>
      </ContentItemReferenceTargetItemID>
    </cms.contentitemreference>
  </ContentItemReferences>
</cms.contentitemcommondata>