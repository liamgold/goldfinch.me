<?xml version="1.0" encoding="utf-8"?>
<cms.contentitemcommondata>
  <ContentItemCommonDataContentItemID>
    <CodeName>TheKenticoSaaSMigration_AutomatedDeployments-by4jr9lw</CodeName>
    <GUID>d3bb8ad3-f248-456d-971b-da6ffd4bc94c</GUID>
    <ObjectType>cms.contentitem</ObjectType>
  </ContentItemCommonDataContentItemID>
  <ContentItemCommonDataContentLanguageID>
    <CodeName>en</CodeName>
    <GUID>22960170-5c33-4d4e-a01b-fd4c8fcbd13d</GUID>
    <ObjectType>cms.contentlanguage</ObjectType>
  </ContentItemCommonDataContentLanguageID>
  <ContentItemCommonDataFirstPublishedWhen>2025-04-28 22:27:39Z</ContentItemCommonDataFirstPublishedWhen>
  <ContentItemCommonDataGUID>8bccfdc5-1553-4080-9f91-28f4b4ac3a79</ContentItemCommonDataGUID>
  <ContentItemCommonDataIsLatest>True</ContentItemCommonDataIsLatest>
  <ContentItemCommonDataLastPublishedWhen>2025-04-29 20:30:50Z</ContentItemCommonDataLastPublishedWhen>
  <ContentItemCommonDataVersionStatus>2</ContentItemCommonDataVersionStatus>
  <ContentItemCommonDataVisualBuilderWidgets>
    <![CDATA[{"editableAreas":[{"identifier":"BlogPost","sections":[{"identifier":"cab019a1-4dd2-4b7c-a16e-59682b9a2ef7","type":"Kentico.DefaultSection","properties":null,"zones":[{"identifier":"1806fb42-91bf-42d8-9bd6-7e652fabed5c","widgets":[{"identifier":"702257fd-f22f-45ce-9821-8da7c8ceefd1","type":"Kentico.Widget.RichText","variants":[{"identifier":"81c4d1a3-4036-40ea-a266-c1f0793101d0","properties":{"content":"<p>In <a href=\"~/blog/the-kentico-saas-migration-a-step-by-step-guide\" target=\"_blank\" rel=\"noopener noreferrer\">Part 1</a>, I walked through migrating my self-hosted Xperience by Kentico website to Kentico SaaS, manually deploying via the Xperience Portal to prove the migration path. 👏</p><p>Manual upload is fine when you're testing to make sure your project is SaaS deployable, but going forward we want something much better: automated deployments. 🤖</p><p>In this post, I'll show the changes I made to my existing Azure DevOps CI/CD pipelines to switch from self-hosted to SaaS deployments. Let's get started!</p><p><strong>Why Automate SaaS Deployments?</strong></p><p>While uploading a deployment package manually through the Xperience Portal is great for an initial deployment, it quickly becomes unsustainable for real projects. Kentico recommends <a href=\"https://community.kentico.com/blog/xperience-by-kentico-saas-best-practices#deploy-to-production-early\" target=\"_blank\" rel=\"noopener noreferrer\">deploying to production early, and regularly</a>. Automating deployments will ensure that every deployment will be:</p><ul><li>✅ <strong>Consistent</strong> - the same deployment steps every time</li><li>🚀 <strong>Fast</strong>&nbsp; - no manual zipping and uploading</li><li>🛡️ <strong>Reliable</strong> - no missed steps or human errors</li><li>🧪 <strong>Tested</strong> - steps can include automated testing to catch issues early</li></ul><p><strong>Old Pipeline</strong></p><p>Before migrating to SaaS, my existing CI/CD flow was built around deploying to a self-hosted environment. Let's takes a look at how the setup worked. 👀</p><p>The process started with a build pipeline that handled compiling the website and producing a deployment package ready for release.</p>"},"fieldIdentifiers":{"content":"5fb9e171-8735-44c2-b7a0-472987fc1e5c"}}]},{"identifier":"df2c0a76-230c-495c-adc9-107d9c744b1f","type":"Goldfinch.ImageWidget","variants":[{"identifier":"fef51d82-22e3-472f-959b-d3fd4d4a7ac7","properties":{"selectedAssets":[{"identifier":"eb203deb-70db-420d-83cf-eb9cdcd47ac7"}]},"fieldIdentifiers":{"selectedAssets":"48d0e734-98a2-427f-8d6c-f404995ac291"}}]},{"identifier":"87af7c02-ee74-42e0-8e69-e05b7b5b2957","type":"Kentico.Widget.RichText","variants":[{"identifier":"5f22dca5-2c67-4094-9ed0-036a7933c2dc","properties":{"content":"<p>The first part of the pipeline focuses on building the front-end assets. I always aim to use the latest LTS version of <strong>Node.js</strong>, so the pipeline starts by making sure the agent has it installed. Next, it runs <strong>npm install</strong> to download and set up all of the project's dependencies. Finally, it compiles the front-end source files into optimised, production ready assets that can be deployed.</p><p>The next phase handles the .NET backend. The pipeline uses the .NET SDK version specified in the <strong>global.json</strong> file to ensure compatibility, then runs <strong>dotnet restore</strong> to pull in all required <strong>NuGet&nbsp;</strong>packages. After that, it runs <strong>dotnet publish</strong> to compile and prepare the application for deployment.</p><p>Once the build is complete, the final task packages up everything into an artifact, essentially a zip file containing all of the files produced by the dotnet publish command. This artifact is then made available for the release pipeline to deploy.</p><p>The release pipeline picks up the artifact, extracts it onto the shared server, ensures IIS is configured with the correct bindings, and applies environment specific configuration transformations. As this part of the pipeline will be completely replaced, I won't be spending time covering it here.</p><p><strong>New Pipeline</strong></p><p>The new pipeline still follows the same core flow of setting up <strong>Node.js</strong> and building the front-end assets, restoring .NET project dependencies, and preparing the application for deployment. 👍</p>"},"fieldIdentifiers":{"content":"04b4a5a5-8aae-4047-a898-91e2321af444"}}]},{"identifier":"e8e2065a-4e3e-43fe-81f3-28150dc8abf7","type":"Goldfinch.ImageWidget","variants":[{"identifier":"97b6f862-7974-46d3-8551-f7cc1348d531","properties":{"selectedAssets":[{"identifier":"c07050de-6d62-4afe-806e-1fe5a80dcb2a"}]},"fieldIdentifiers":{"selectedAssets":"7c3bf72d-966f-4b44-afd2-11d97d9732ac"}}]},{"identifier":"97639a02-a85f-49b4-bc34-c32cd6f1374a","type":"Kentico.Widget.RichText","variants":[{"identifier":"0e436509-11bf-4804-986d-919da1100cea","properties":{"content":"<p>However, as you can see, it introduces additional steps to set up and tear down a temporary SQL database.</p><p>It starts by running a <strong>dotnet</strong> command to ensure the <strong>Microsoft.SqlPackage</strong> tool is available. This is needed to the pipeline can interact with the SQL Server instance to create and manage the temporary database.</p><p>You might be wondering why the database is needed at all. 🤔</p><p>The main reason is that I don't want the CD files committed to source control, only the configuration file should be. Secondly, even if the CD files were committed, there would always be a risk that a developer might forget to commit the latest version, introducing potential errors during deployment.</p><p>With the SQL tools installed, the next phase is restoring the <strong>Seed SQL Database</strong>. This is handled by a PowerShell script, which restored a lightweight <strong>.bacpac</strong> file from source control onto the SQL Server instance. This same seed database is what a new developer would use to get the project set up locally for the first time.</p><p>Once the database is restored, we use the <strong>Replace tokens in settings files</strong> task to ensure that the built project has the correct connect string by injecting the required secrets stored securely in Azure DevOps.</p><p>With everything configured, we can now the run the CI restore command. This step updates the temporary database with the latest serialised objects from the file system. This is exactly the same process a developer would run locally to bring their local environment up to date.</p>"},"fieldIdentifiers":{"content":"594bce86-161e-4a53-8203-da64a2888055"}}]},{"identifier":"c13a177f-f5fa-4ecb-bfe7-03f3379e13ee","type":"Goldfinch.CodeBlockWidget","variants":[{"identifier":"67a6a114-1a9c-418b-8a51-decebc113e7e","properties":{"language":"bash","code":"dotnet run --kxp-ci-restore"},"fieldIdentifiers":{"language":"b5904756-e145-4904-bf00-7d9922a41b99","code":"fb6adeba-e818-449b-bec3-d4c550a7264e"}}]},{"identifier":"adbb908a-7e59-43b3-9d3c-b4cc2bb2b895","type":"Kentico.Widget.RichText","variants":[{"identifier":"42ebf202-b73c-47df-9aa9-f4f57e16322c","properties":{"content":"<p>At this point, you have a site fully configured with an up to date database. You could extend the pipeline to run any automated tests included in your solution, and if any fail, you can stop the deployment from proceeding further.</p><p>Next, the pipeline runs the CD store command. This step should look familiar if you followed the previous blog post, it serialises database objects to the file system, preparing them for deployment.</p><p>The only difference now being that the command targets the working directory inside the pipeline environment, rather than relying on my local file system.</p>"},"fieldIdentifiers":{"content":"94858068-680f-4edc-b611-88020c1b62fc"}}]},{"identifier":"da916581-3f1f-4c3c-b998-edc1ef1acc83","type":"Goldfinch.CodeBlockWidget","variants":[{"identifier":"13fe0a62-c8c8-4e49-aaec-cf63435de098","properties":{"language":"bash","code":"dotnet run --no-build -- --kxp-cd-store\n    --repository-path \"$(System.DefaultWorkingDirectory)\\src\\Goldfinch.Web\\`$CDRepository\"\n    --config-path \"$(System.DefaultWorkingDirectory)\\src\\Goldfinch.Web\\App_Data\\CDRepository\\repository.config\""},"fieldIdentifiers":{"language":"d490288b-d52b-42de-ad74-3bb0a77ad5e3","code":"cce9747f-5d57-4d1f-9d6d-854894f4b9b6"}}]},{"identifier":"ea9d9d1d-7a9a-4cc1-8d34-1f977cca24aa","type":"Kentico.Widget.RichText","variants":[{"identifier":"7cf25f7d-0b5a-41f8-b1a3-360f45418847","properties":{"content":"<p>Once the CD store process is complete, the pipeline removes the connection string file from the file system. It has served its purpose, and we definitely don't want any secrets being deployed to SaaS. 😁</p><p>With the project cleaned up, the pipelines runs the <strong>Export-DeploymentPackage.ps1</strong> scripts just like we did during the manual deployment process. This creates the deployment package that will be uploaded to the Xperience Portal.</p><p>There's one final cleanup task, deleting the seeding database from the SQL Server instance. We don't want to leave anything behind after the build completes!</p><p><strong>The Deployment</strong></p><p>The <strong>Deploy To SaaS QA Environment</strong> task runs a custom PowerShell script which follows the exact steps from the <a href=\"https://docs.kentico.com/developers-and-admins/deployment/deploy-to-the-saas-environment#upload-a-deployment-package-to-your-xperience-portal-project\" target=\"_blank\" rel=\"noopener noreferrer\">documentation</a>. It simply makes a <strong>POST&nbsp;</strong>request to the Xperience Portal API, using a bearer token for authentication, and the deployment package.</p><p>To generate a bearer token, you'll need to create a Personal Access Token (PAT) within the Xperience Portal. There's a dedicated area inside the Portal to manage and generate PATs:</p>"},"fieldIdentifiers":{"content":"a68758fc-31c6-4856-b9ea-ed1b5e62ea54"}}]},{"identifier":"9e67b8b5-ec4b-4dba-9877-a636404765da","type":"Goldfinch.ImageWidget","variants":[{"identifier":"45290874-bd5a-44e7-8fc8-3aeea2d075e9","properties":{"selectedAssets":[{"identifier":"a10ba675-6bab-4522-9a02-25eb9c31b108"}]},"fieldIdentifiers":{"selectedAssets":"a594f2a0-30d7-4060-a007-461f432e7aac"}}]},{"identifier":"38391441-4179-4802-bf29-7093c52ab8ad","type":"Kentico.Widget.RichText","variants":[{"identifier":"3ccce084-7518-4598-a233-b105a454d240","properties":{"content":"<p>Now, when you run the pipeline (because it always works perfectly first time, right? 😉), you'll see a deployment appear in the Deployments dashboard! 👏</p>"},"fieldIdentifiers":{"content":"e628b6a9-0df6-4987-ba90-2eb49ad11efb"}}]},{"identifier":"0e2662fb-76ce-4099-8c28-da224b1b482e","type":"Goldfinch.ImageWidget","variants":[{"identifier":"d9d0d34b-8fec-4840-bac9-93a27bd37c42","properties":{"selectedAssets":[{"identifier":"f2fdd084-9433-4318-8323-fe562239d437"}]},"fieldIdentifiers":{"selectedAssets":"86e6f2a0-664c-49da-8c83-a1c1d84f54f7"}}]},{"identifier":"853ada6f-b58a-41dd-9985-fd1b384f75b7","type":"Kentico.Widget.RichText","variants":[{"identifier":"5af22340-7c76-40a2-9f6a-d8aa30b20aaf","properties":{"content":"<p>Remember, whether you're deploying manually of through automation, deployments can currently only be uploaded directly to the <strong>QA environment</strong>.</p><p>You can't skip QA and deploy straight to another environment, at least not yet. Maybe one day in the future? 🤞</p><p>Once your deployment appears in QA, it can be promoted to the next environment just like a manual deployment, once the testers have approved the QA site.</p><p>The pipelines I have shown in this post use the classic visual editor in Azure DevOps. However, I'd recommend switching to YAML based pipeline where possible. It makes it easier to reuse across new projects, and because it's stored in source control it evolves alongside your existing codebase.</p><p><strong>Coming Next...</strong></p><p>Migrating to SaaS didn't mean starting from scratch with automated deployments, but I did need to adapt it.</p><p>The core CI/CD principles hadn't changed, I was still building, testing, packaging, but instead of deploying to a self-hosted server, I was using&nbsp;Xperience Portal's deployment API endpoint.</p><p>👉 Up next, <a href=\"~/blog/the-kentico-saas-migration-lessons-learned-and-troubleshooting-tips\" target=\"_blank\" rel=\"noopener noreferrer\">lessons learned and troubleshooting tips</a>! 💡</p>"},"fieldIdentifiers":{"content":"7b186397-7d9b-41fb-a311-04ec2c651d99"}}]}]}],"fieldIdentifiers":{}}]}]}]]>
  </ContentItemCommonDataVisualBuilderWidgets>
  <ContentItemReferences>
    <cms.contentitemreference>
      <ContentItemReferenceGroupGUID>7c3bf72d-966f-4b44-afd2-11d97d9732ac</ContentItemReferenceGroupGUID>
      <ContentItemReferenceGUID>e54571a7-e304-4476-9aca-f223e01a972c</ContentItemReferenceGUID>
      <ContentItemReferenceSourceCommonDataID>
        <GUID>8bccfdc5-1553-4080-9f91-28f4b4ac3a79</GUID>
        <ObjectType>cms.contentitemcommondata</ObjectType>
      </ContentItemReferenceSourceCommonDataID>
      <ContentItemReferenceTargetItemID>
        <CodeName>SaaSMigration-AzureDevOps-NewPipeline-y9fp15h1</CodeName>
        <GUID>c07050de-6d62-4afe-806e-1fe5a80dcb2a</GUID>
        <ObjectType>cms.contentitem</ObjectType>
      </ContentItemReferenceTargetItemID>
    </cms.contentitemreference>
    <cms.contentitemreference>
      <ContentItemReferenceGroupGUID>a594f2a0-30d7-4060-a007-461f432e7aac</ContentItemReferenceGroupGUID>
      <ContentItemReferenceGUID>b6f0772d-10bc-4727-a16b-e968c787672c</ContentItemReferenceGUID>
      <ContentItemReferenceSourceCommonDataID>
        <GUID>8bccfdc5-1553-4080-9f91-28f4b4ac3a79</GUID>
        <ObjectType>cms.contentitemcommondata</ObjectType>
      </ContentItemReferenceSourceCommonDataID>
      <ContentItemReferenceTargetItemID>
        <CodeName>SaaSMigration-XperiencePortal-CreatePAT-eai5hqsy</CodeName>
        <GUID>a10ba675-6bab-4522-9a02-25eb9c31b108</GUID>
        <ObjectType>cms.contentitem</ObjectType>
      </ContentItemReferenceTargetItemID>
    </cms.contentitemreference>
    <cms.contentitemreference>
      <ContentItemReferenceGroupGUID>86e6f2a0-664c-49da-8c83-a1c1d84f54f7</ContentItemReferenceGroupGUID>
      <ContentItemReferenceGUID>cfb74744-3110-4b65-8fdc-9a634d384727</ContentItemReferenceGUID>
      <ContentItemReferenceSourceCommonDataID>
        <GUID>8bccfdc5-1553-4080-9f91-28f4b4ac3a79</GUID>
        <ObjectType>cms.contentitemcommondata</ObjectType>
      </ContentItemReferenceSourceCommonDataID>
      <ContentItemReferenceTargetItemID>
        <CodeName>SaaSMigration-XperiencePortal-DeploymentDashboard-u6a3ouue</CodeName>
        <GUID>f2fdd084-9433-4318-8323-fe562239d437</GUID>
        <ObjectType>cms.contentitem</ObjectType>
      </ContentItemReferenceTargetItemID>
    </cms.contentitemreference>
    <cms.contentitemreference>
      <ContentItemReferenceGroupGUID>48d0e734-98a2-427f-8d6c-f404995ac291</ContentItemReferenceGroupGUID>
      <ContentItemReferenceGUID>7357c55f-880c-4cd0-9555-3e800b54d987</ContentItemReferenceGUID>
      <ContentItemReferenceSourceCommonDataID>
        <GUID>8bccfdc5-1553-4080-9f91-28f4b4ac3a79</GUID>
        <ObjectType>cms.contentitemcommondata</ObjectType>
      </ContentItemReferenceSourceCommonDataID>
      <ContentItemReferenceTargetItemID>
        <CodeName>SaaSMigration-AzureDevOps-OldPipeline-cn3lf1be</CodeName>
        <GUID>eb203deb-70db-420d-83cf-eb9cdcd47ac7</GUID>
        <ObjectType>cms.contentitem</ObjectType>
      </ContentItemReferenceTargetItemID>
    </cms.contentitemreference>
  </ContentItemReferences>
</cms.contentitemcommondata>