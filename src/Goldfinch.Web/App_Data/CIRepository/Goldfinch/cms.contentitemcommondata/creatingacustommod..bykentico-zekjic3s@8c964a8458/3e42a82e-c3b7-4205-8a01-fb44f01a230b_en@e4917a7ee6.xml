<?xml version="1.0" encoding="utf-8"?>
<cms.contentitemcommondata>
  <ContentItemCommonDataContentItemID>
    <CodeName>CreatingACustomModuleInXperienceByKentico-zekjic3s</CodeName>
    <GUID>c891ef8c-ccd5-4a8f-9a39-e3ea34cedff6</GUID>
    <ObjectType>cms.contentitem</ObjectType>
  </ContentItemCommonDataContentItemID>
  <ContentItemCommonDataContentLanguageID>
    <CodeName>en</CodeName>
    <GUID>22960170-5c33-4d4e-a01b-fd4c8fcbd13d</GUID>
    <ObjectType>cms.contentlanguage</ObjectType>
  </ContentItemCommonDataContentLanguageID>
  <ContentItemCommonDataGUID>3e42a82e-c3b7-4205-8a01-fb44f01a230b</ContentItemCommonDataGUID>
  <ContentItemCommonDataIsLatest>True</ContentItemCommonDataIsLatest>
  <ContentItemCommonDataLastPublishedWhen>2024-07-13 00:31:21Z</ContentItemCommonDataLastPublishedWhen>
  <ContentItemCommonDataVersionStatus>2</ContentItemCommonDataVersionStatus>
  <ContentItemCommonDataVisualBuilderWidgets>
    <![CDATA[{"editableAreas":[{"identifier":"BlogPost","sections":[{"identifier":"0ae5210d-8bec-4036-85a1-75a67fc76add","type":"Kentico.DefaultSection","properties":null,"zones":[{"identifier":"c5ebfcfe-9854-44a8-9e18-f8d0c5782a50","widgets":[{"identifier":"938e2e77-9864-4531-8a24-17dcc7aa0d8f","type":"Kentico.Widget.RichText","variants":[{"identifier":"c475c6f6-7bf3-44be-9e35-195f11f8f19b","properties":{"content":"<p id=\"isPasted\">Over the years, I have built many websites in Kentico, and one of my favourite tasks has always been extending the admin interface by building custom modules and applications. Kentico provides flexibility with its out-of-the-box layouts, components, and tools, allowing you to effortlessly achieve complex user interfaces. This advantage becomes even more apparent when comparing it to other platforms!</p><p>I recently participated in Kentico's webinar,&nbsp;<a href=\"https://www.kentico.com/discover/webinars/technical-webinar-xperience-by-kentico-june-2023\" rel=\"noopener noreferrer\" target=\"_blank\">Xperience by Kentico: Summer Technical Session</a>, where I demonstrated how I created a basic custom module in Xperience by Kentico. Now, let's recap the entire process from end to end. The example we will be covering is a simple module allowing users to create categories for blog posts.</p><p><strong>Step 1 - Create a new module</strong></p><p>Just like in Kentico Xperience 13, we start by creating a new module in the Modules application. We simply provide a display name and a code name that we want to associate with the module.</p>"},"fieldIdentifiers":{"content":"8e087ad2-9c16-416d-84aa-f667d2e646f6"}}]},{"identifier":"f3e127b9-6f3d-4411-852a-a4a03267e6fa","type":"Goldfinch.VideoWidget","variants":[{"identifier":"5b82df46-3b37-41ae-b2d4-277324e185dc","properties":{"selectedAssets":[{"identifier":"16be6238-c0c1-4adb-b4ad-350d623c7ea5"}],"video":[],"posterImage":[],"description":""},"fieldIdentifiers":{"video":"0e396082-ccf9-44e7-9e38-ba2982848672","description":"f3b85859-a2a0-4d2c-a342-e0f1a3af6747","posterImage":"3ad7a025-d52f-4663-badc-6270972340d9","selectedAssets":"0c4b18bb-c57a-4b98-b2b7-2c5e6b3d84d5"}}]},{"identifier":"bb54fa5f-aae6-47c7-8d7d-c60d337a1b02","type":"Kentico.Widget.RichText","variants":[{"identifier":"0a19cdc6-42e5-44d7-a419-b8533def98e4","properties":{"content":"<p id=\"isPasted\"><strong>Step 2 - Create a Blog Category class</strong></p><p>Once the module is created, we can now configure a class that will represent the data needed for the blog categories</p><p>To start, I create a new class and provide both a display name and a code name.</p><p>Next, I switch to the database columns tab to create the fields in the database. This is done by providing a field name and its corresponding data type.</p>"},"fieldIdentifiers":{"content":"fbad1345-90d7-400c-a639-dbc872934c50"}}]},{"identifier":"21d683b7-c83f-4f26-a5f0-54634d1da430","type":"Goldfinch.VideoWidget","variants":[{"identifier":"9f889247-3458-4b90-ad69-54356e7261c2","properties":{"selectedAssets":[{"identifier":"28c7838b-4b99-4c5d-a392-90d72a473613"}],"video":[],"posterImage":[],"description":""},"fieldIdentifiers":{"video":"de0f56e6-c000-448c-95af-e7ea46d7b2b4","description":"64535951-9624-4517-8e95-fbbbea65e91a","posterImage":"532f8b0b-f48d-4aed-ab73-aa46c324ef6b","selectedAssets":"9f16f32f-cf1b-428b-8054-4dbc86064b99"}}]},{"identifier":"6017bd91-0c28-4377-b96d-d5a2bbc77182","type":"Kentico.Widget.RichText","variants":[{"identifier":"eb5ee030-2c99-4667-8965-0bc2e4a5663d","properties":{"content":"<p id=\"isPasted\"><strong>Step 3 - Create UI forms for \"Create\" and \"Edit\" screens</strong></p><p>After creating the database columns, our next step is to design 'create' and 'edit' forms that will be displayed to the user when they attempt to create or edit a blog category. These forms are separately managed so you can have different labels, visibility conditions, etc.</p>"},"fieldIdentifiers":{"content":"a215db2d-ec1b-4e2d-bd50-d11f7d476919"}}]},{"identifier":"9bedff65-ce9f-4032-95b5-2eeb319ba77e","type":"Goldfinch.VideoWidget","variants":[{"identifier":"1c7d00a5-654c-4361-8fa6-7e25dbc41609","properties":{"selectedAssets":[{"identifier":"65e838e4-8d9f-41f5-82d3-c3f36933ed8b"}],"video":[],"posterImage":[],"description":""},"fieldIdentifiers":{"video":"78f8f337-ffdb-4475-bbd6-174067f8c0b0","description":"9152dea0-e268-4188-887e-82ee23af8686","posterImage":"c36cf1b5-1a3d-4f13-8267-b9631c809671","selectedAssets":"138a9da8-854d-4fba-b16b-78b57e0d9b3b"}}]},{"identifier":"81928d9b-4a5f-4bcb-b4d0-b2a664b2f976","type":"Kentico.Widget.RichText","variants":[{"identifier":"f130cdf0-623e-4d20-a66d-6461d1fbe842","properties":{"content":"<p id=\"isPasted\">In each UI Form, I select the database column I want to display and configure its associated caption. Additionally, I choose a form component to allow users to populate the field.</p><p><strong>Step 4 - Generate code files</strong></p><p>Similar to Kentico Xperience 13, I prefer generating code files for my custom module objects. The generated files are object-specific, making it easier to interact with the objects. In Xperience by Kentico, this is done by running the code generation dotnet command:</p>"},"fieldIdentifiers":{"content":"894466a9-5d74-4493-aa75-276044889940"}}]},{"identifier":"4b43213a-2cba-4674-bd47-84db23849048","type":"Goldfinch.CodeBlockWidget","variants":[{"identifier":"fd8b4d50-e796-486d-8f22-88c69ad75403","properties":{"language":"csharp","code":"dotnet run --no-build -- --kxp-codegen\n    --type \"Classes\"\n    --include \"Goldfinch.*\"\n    --location \"../Goldfinch.Core/{type}/{dataClassNamespace}/{name}/\""},"fieldIdentifiers":{"language":"d7b60b39-8c9f-42bf-8656-574c6dbf1a40","code":"d57a77ca-c77f-473f-97dc-bd2b85ee1ed8"}}]},{"identifier":"37601433-9700-4d6a-ace4-e522396e0711","type":"Kentico.Widget.RichText","variants":[{"identifier":"3ed45d6e-5771-4db0-9591-63f20c2d4c66","properties":{"content":"<p id=\"isPasted\">I am passing three parameters to the codegen tool to customise what will be generated and where the files are output:</p><ul><li>Type - allows us to configure which type of files are being output, e.g. Classes means only generate code files for object types (not page types, etc).</li><li>Include - allows us to filter which objects are being output, e.g. in my example I am only outputting files with the namespace prefix <strong>Goldfinch&nbsp;</strong>and using a wildcard to match any class from that namespace.</li><li>Location - allows us to control the path of the target location where the code files are generated. My example uses the default location, but I am going up a level first and then into a separate project called <strong>Goldfinch.Core</strong>.</li></ul><p id=\"isPasted\">This command will generate three classes for each object:</p><p><strong>BlogCategoryInfo.generated.cs</strong> is the object type class that contains all the database fields as properties, making it easy to interact with them.</p><p><strong>BlogCategoryInfoProvider.generated.cs</strong> is the info provider class that provides methods of data retrieval and manipulation.</p><p><strong>IBlogCategoryInfoProvider.generated.cs</strong> is the matching interface for the generated info provider class, Kentico automatically registers the interface and implementation so you can dependency inject them into your own code wherever you may need them.</p><p>So far, the process of creating a custom module has been very similar to Kentico Xperience 13. You create the module within the admin site and generate the code files for it. However, Xperience by Kentico differs when it comes to creating the UI pages. Instead of using the User Interface tab of the module, Xperience takes a code-based approach. But don't worry – Kentico still provides easy out-of-the-box layouts.</p><p><strong>Step 5: Create a new admin project</strong></p><p>Let's start by scaffolding a new admin project. You don't need to start from scratch; Kentico already provides a boilerplate project you can use to kick-start the process.</p><p>Firstly, we need to run the code generation for an admin project using the following dotnet command:</p>"},"fieldIdentifiers":{"content":"513e55b1-30c8-427b-9beb-a7e47a4874bd"}}]},{"identifier":"c2a84277-50a6-4aea-b128-12aa07143f27","type":"Goldfinch.CodeBlockWidget","variants":[{"identifier":"f2061b5b-1f0e-4b0b-abbf-4e96bbc552c0","properties":{"language":"csharp","code":"dotnet new kentico-xperience-admin-sample -n Goldfinch.Web.Admin"},"fieldIdentifiers":{"language":"df19d5c5-761b-4a5e-a059-923e0fd383fa","code":"8e8c202a-aa69-4f3d-8d7e-997669254ab5"}}]},{"identifier":"ba2fbe4a-976a-49ab-82f5-6cd12be55651","type":"Kentico.Widget.RichText","variants":[{"identifier":"214471b7-2b4b-4293-a9d6-b0dbcb7b694d","properties":{"content":"<p>This will generate a sample project with the following structure:</p>"},"fieldIdentifiers":{"content":"232de02a-7213-4597-b1a4-1110cd6ae96a"}}]},{"identifier":"df02c0af-6d5e-429a-87fe-787e6a570384","type":"Goldfinch.CodeBlockWidget","variants":[{"identifier":"5b799354-4e2f-4363-9161-177002513c70","properties":{"language":"csharp","code":"Goldfinch.Web.Admin/\n├── Client/\n│   └── ** React code lives here **\n├── UIPages/\n│   ├── CustomTemplate/\n│   │   └── CustomTemplate.cs\n│   └── UserListExtender/\n│       └── UserListExtender.cs\n└── WebAdminModule.cs"},"fieldIdentifiers":{"language":"bd4b912c-8c90-4275-aebc-9adb46f793ea","code":"6786a221-3ade-4fca-9913-37034685738c"}}]},{"identifier":"8d207ed4-a3c0-4b2e-a138-df4fb9b86e2e","type":"Kentico.Widget.RichText","variants":[{"identifier":"72926cb0-22b6-4c7c-9a11-f284d94e7db3","properties":{"content":"<p id=\"isPasted\">The first folder,&nbsp;<strong>Client</strong>, is where the boilerplate code allows you to add your own ReactJS-based templates and pages. You will only need to access this area when you start building really complex user interfaces or when you want to create bespoke components to use within the admin site. As we are creating a basic module, we don't need to use ReactJS at all, we'll cover that another day! 😄</p><p>The second folder,&nbsp;<strong>UIPages</strong>, is where we'll be working from today. This is where you define C# classes to build up the pages themselves, so this could be for listing pages, add or edit forms, etc. The boilerplate includes an example of a custom template, and an extender to add additional functionality to Kentico's out-of-the-box user listing module.</p><p>The last item in the boilerplate is the&nbsp;<strong>WebAdminModule</strong> class. Let's take a look at the contents:</p>"},"fieldIdentifiers":{"content":"881dc090-babf-4fad-99ce-fc8cb335fcd5"}}]},{"identifier":"a1c0ea01-3bc9-4357-aab0-fd2787c84786","type":"Goldfinch.CodeBlockWidget","variants":[{"identifier":"eab76873-9c81-4942-8ce7-299dfbc0e096","properties":{"language":"csharp","code":"using Goldfinch.Web.Admin;\n\nusing Kentico.Xperience.Admin.Base;\n\n[assembly: CMS.AssemblyDiscoverable]\n[assembly: CMS.RegisterModule(typeof(WebAdminModule))]\n\n// Adds a new application category \n[assembly: UICategory(\n    codeName: WebAdminModule.CUSTOM_CATEGORY,\n    name: \"Custom\",\n    icon: Icons.CustomElement,\n    order: 100)]\n\nnamespace Goldfinch.Web.Admin\n{\n    internal class WebAdminModule : AdminModule\n    {\n        public const string CUSTOM_CATEGORY = \"goldfinch.web.admin.category\";\n\n        public WebAdminModule()\n            : base(\"Goldfinch.Web.Admin\")\n        {\n        }\n\n        protected override void OnInit()\n        {\n            base.OnInit();\n\n            // Makes the module accessible to the admin UI\n            RegisterClientModule(\"goldfinch\", \"web-admin\");\n        }\n    }\n}"},"fieldIdentifiers":{"language":"daf9fadb-153a-47f3-b38a-9c94855a933d","code":"7f9cec3f-9f56-47f5-9caf-56ddaa3b3851"}}]},{"identifier":"cd4b42ba-7577-48f6-b2d2-c008a48bd596","type":"Kentico.Widget.RichText","variants":[{"identifier":"ac5b9b1c-06e7-48d9-997a-890b2c37fdd2","properties":{"content":"<p id=\"isPasted\">The primary responsibility of this admin module class is to register the client module generated in the&nbsp;<strong>Client&nbsp;</strong>folder. The&nbsp;<strong>RegisterClientModule</strong> method within this admin module class takes an organization name and project name, both of which should match the values within&nbsp;<strong>Client/webpack.config.js</strong>.</p><p>You'll also notice there's an assembly attribute which registers a UICategory. Here we are adding a new category to store our custom module applications under. This is entirely optional, as you can still put applications under the Kentico categories already provided.</p><p><strong>Step 6: Create an application tile</strong></p><p>Now that we have a custom category, let's begin by creating the Blog Categories application tile. This tile will be used by content editors and marketers to access our new module.</p>"},"fieldIdentifiers":{"content":"05da0dfe-19b0-4bf6-add5-6a1a405f3a12"}}]},{"identifier":"42ce1b95-8f0f-4c15-8837-0ff86fb2afff","type":"Goldfinch.CodeBlockWidget","variants":[{"identifier":"ef7d47b0-d203-4ec8-b912-8461666a94bc","properties":{"language":"csharp","code":"using Goldfinch.Web.Admin;\nusing Goldfinch.Web.Admin.UIPages.BlogCategories;\nusing Kentico.Xperience.Admin.Base;\n\n[assembly: UIApplication(\n\tidentifier: BlogCategoriesApplication.IDENTIFIER,\n\ttype: typeof(BlogCategoriesApplication),\n\tslug: \"blog-categories\",\n\tname: \"Blog categories\",\n\tcategory: WebAdminModule.CUSTOM_CATEGORY,\n\ticon: Icons.Tags,\n\ttemplateName: TemplateNames.SECTION_LAYOUT)]\n\nnamespace Goldfinch.Web.Admin.UIPages.BlogCategories\n{\n\tpublic class BlogCategoriesApplication : ApplicationPage\n\t{\n\t\t// Unique identifier of the application\n\t\tpublic const string IDENTIFIER = \"Goldfinch.Web.Admin.Application.BlogCategories\";\n\t}\n}"},"fieldIdentifiers":{"language":"b2cad971-3ab7-4c56-8931-c900a5468593","code":"2771ee75-c1b6-4030-a2f1-91dab5fa7112"}}]},{"identifier":"72cde900-d77b-4052-855e-498954bb7c44","type":"Kentico.Widget.RichText","variants":[{"identifier":"40ee7716-6875-434e-9f5b-c445b283c9bd","properties":{"content":"<p id=\"isPasted\">We create a new class that inherits from ApplicationPage and then define an identifier/codename with which we want to register the application. Next, we add an assembly attribute called UIApplication. This attribute allows us to control various aspects of the application, such as the display name, the slug used within the URL when navigating the module, the icon displayed on the tile, and the template used.</p><p>The tile added to the admin site will have a Tags icon and have a URL of <strong>/admin/blog-categories</strong>.</p>"},"fieldIdentifiers":{"content":"03e3a20d-6be9-4722-931a-a5b99446e7a3"}}]},{"identifier":"d10db426-9470-4ca0-88fc-78bd6aa2eb50","type":"Goldfinch.ImageWidget","variants":[{"identifier":"59882ae4-0ba3-4896-9311-1dc4e071a630","properties":{"selectedAssets":[{"identifier":"ff964a51-537c-434a-872d-f885ad7fb1fa"}],"image":[],"description":""},"fieldIdentifiers":{"image":"4bf52fac-945f-4376-9006-a64a447a915c","description":"cb8eab5b-a048-4daa-9ec0-bfe24b091c60","selectedAssets":"303068e2-4728-40fe-a3ff-0c9279204c59"}}]},{"identifier":"9956118b-ba03-4f49-80cd-a7460a5a2f65","type":"Kentico.Widget.RichText","variants":[{"identifier":"d0d3f382-a4f2-446f-8297-8bd38456c2fd","properties":{"content":"<p id=\"isPasted\"><strong>Step 7: Add a listing page</strong></p><p>So far, if you clicked the module tile, you'd be greeted with a blank page. We haven't actually told Kentico what to display yet! Our aim here is to have a listing page which shows a list of Blog Categories that have been created within the module, ideally looking something like this.</p>"},"fieldIdentifiers":{"content":"b10aac78-5df9-49c6-b2aa-b7d90c283d42"}}]},{"identifier":"12205cb9-cbe6-45f7-a2c7-2814620a77b7","type":"Goldfinch.ImageWidget","variants":[{"identifier":"60d3a777-0f79-4306-86ee-654736efd299","properties":{"selectedAssets":[{"identifier":"7df7e261-2bc7-4eff-bdc7-921679dcbce2"}],"image":[],"description":""},"fieldIdentifiers":{"image":"ac0c7c83-d6f5-499c-bc04-a3c2e4560c73","description":"eb6307d9-91df-41b7-8b0a-236fb16b185c","selectedAssets":"52491390-f9f3-457f-9bb6-91868a91a8e5"}}]},{"identifier":"923b8155-4c47-43e2-8806-5ca4489d7742","type":"Kentico.Widget.RichText","variants":[{"identifier":"7a83a5ab-a8dc-4325-98da-800c312add78","properties":{"content":"<p>When you look at the class for this listing page, you will probably start to notice a pattern that emerges with these UI Pages. We always create a class, make it inherit from a Kentico class (ListingPage in this instance), and add an assembly attribute (UIPage).</p>"},"fieldIdentifiers":{"content":"96c47375-292e-48f6-8298-d98189f37a02"}}]},{"identifier":"ae1d3437-c475-49bf-9818-c6804eeca9b9","type":"Goldfinch.CodeBlockWidget","variants":[{"identifier":"f8cf87d3-306c-49e2-9e18-bbea8200b19a","properties":{"language":"csharp","code":"using BlogCategories;\nusing Goldfinch.Web.Admin.UIPages.BlogCategories;\nusing Kentico.Xperience.Admin.Base;\nusing System.Threading.Tasks;\n\n[assembly: UIPage(\n    parentType: typeof(BlogCategoriesApplication),\n    slug: \"list\",\n    uiPageType: typeof(BlogCategoryListing),\n    name: \"List\",\n    templateName: TemplateNames.LISTING,\n    order: UIPageOrder.First)]\n\nnamespace Goldfinch.Web.Admin.UIPages.BlogCategories\n{\n    public class BlogCategoryListing : ListingPage\n    {\n        protected override string ObjectType => BlogCategoryInfo.OBJECT_TYPE;\n\n        public override Task ConfigurePage()\n        {\n            PageConfiguration.ColumnConfigurations\n                .AddColumn(nameof(BlogCategoryInfo.BlogCategoryDisplayName), \"Display name\")\n                .AddColumn(nameof(BlogCategoryInfo.BlogCategoryColour), \"Colour\");\n\n            return base.ConfigurePage();\n        }\n    }\n}"},"fieldIdentifiers":{"language":"65983dae-59b7-4f9a-bfa1-3da1a75773ff","code":"b7174e86-ba31-4f2f-8141-38883c7e9899"}}]},{"identifier":"9eb44de5-7300-4be9-88fa-23636f3fcc09","type":"Kentico.Widget.RichText","variants":[{"identifier":"475a0300-4b0a-4ce8-ae75-d83749e850ff","properties":{"content":"<p id=\"isPasted\">This time, we need to inform Kentico about the usage of this listing page. To do this, we set the attribute's parentType parameter to the application class we created in step 6. Additionally, the attribute has a slug of \"list\" configured, resulting in the listing page URL being&nbsp;<strong>/admin/blog-categories/list</strong>.</p><p>Additionally, a listing page requires information about the object type it should list, so we need to configure the ObjectType property using the generated info class.</p><p>The&nbsp;<strong>ConfigurePage&nbsp;</strong>method allows us to configure the listing itself. This is equivalent to creating the layout XML file in Kentico Xperience 13. In this example, I'm adding the two columns from the Blog Category object type and including a name for each column.</p><p><strong>Step 8: Allow users to create blog categories</strong></p><p>Having a listing page will be useful only if we allow users to create the objects in the first place. Therefore, the next step is to add a UI Page that enables this functionality.</p><p>The class for a create page differs slightly from the previous examples, mainly because it needs to inherit from the CreatePage class. The CreatePage class takes two types as parameters: the first one is the info class for which we're setting up the create page, and the second one is the page to which a user will be redirected after the object has been created. Typically, this will be the edit screen, but we'll be implementing that in step 9.</p>"},"fieldIdentifiers":{"content":"c68b5d70-db8c-4720-9493-6d451fe3dae0"}}]},{"identifier":"58b5ea29-340c-45b4-804c-6e4251f99453","type":"Goldfinch.CodeBlockWidget","variants":[{"identifier":"b253da1a-cf89-4b3e-b0c9-f90844cd362c","properties":{"language":"csharp","code":"using BlogCategories;\nusing Goldfinch.Web.Admin.UIPages.BlogCategories;\nusing Kentico.Xperience.Admin.Base;\nusing Kentico.Xperience.Admin.Base.Forms;\n\n[assembly: UIPage(\n\tparentType: typeof(BlogCategoryListing),\n\tslug: \"create\",\n\tuiPageType: typeof(BlogCategoryCreate),\n\tname: \"BlogCategoryCreate\",\n\ttemplateName: TemplateNames.EDIT,\n\torder: 200)]\n\nnamespace Goldfinch.Web.Admin.UIPages.BlogCategories\n{\n\tpublic class BlogCategoryCreate : CreatePage<BlogCategoryInfo, BlogCategoryEditSection>\n\t{\n\t\tpublic BlogCategoryCreate(IFormComponentMapper mapper, IFormDataBinder binder, IPageUrlGenerator generator)\n\t\t\t: base(mapper, binder, generator)\n\t\t{\n\t\t}\n\t}\n}"},"fieldIdentifiers":{"language":"776ff54f-3379-47e3-93cb-825baf540cc1","code":"1ab870e8-f9d0-4293-be8c-8a5c0dbb5b5e"}}]},{"identifier":"e964fca0-5ec7-4938-a2b0-84eb5ede86c1","type":"Kentico.Widget.RichText","variants":[{"identifier":"38c15904-8844-4b71-bab1-f8d6ad9dd84f","properties":{"content":"<p>However, just adding the CreatePage class is not enough for the create page to work. We also need to inform the listing page about its existence and add it as a button above the listing. To achieve this, we just need to add a single line to the <strong id=\"isPasted\">ConfigurePage&nbsp;</strong>method:</p>"},"fieldIdentifiers":{"content":"31d6edda-2cb8-4ffd-a1da-6d6b05f25895"}}]},{"identifier":"bf428497-e810-410f-b53d-429e6e59dc5a","type":"Goldfinch.CodeBlockWidget","variants":[{"identifier":"da444a94-9da0-49ea-ba14-713ab43c2e34","properties":{"language":"csharp","code":"PageConfiguration.HeaderActions.AddLink<BlogCategoryCreate>(\"New blog category\");"},"fieldIdentifiers":{"language":"d3645293-0c13-4cd3-9606-f42f5ff5066a","code":"2c0dd1d2-61d5-4a59-b2d0-9c73703e6eb6"}}]},{"identifier":"a53002d4-f321-4b77-80b4-8c23a2913a4f","type":"Kentico.Widget.RichText","variants":[{"identifier":"bf2deabb-8fa8-45b7-afd3-f71cf2ba935d","properties":{"content":"<p>Now, when users click the 'New blog category' button, it will redirect them to the create form, which now has the URL&nbsp;<strong id=\"isPasted\">/admin/blog-categories/list/create</strong>.</p>"},"fieldIdentifiers":{"content":"278823c1-f9e3-49ae-afd0-c4d458eb474e"}}]},{"identifier":"0ecd88f8-ab23-47f6-ab4e-50ccc06d0979","type":"Goldfinch.ImageWidget","variants":[{"identifier":"3b8c3a9a-dbe9-4947-85b5-c8122454d01e","properties":{"selectedAssets":[{"identifier":"a757ff4d-7d27-4985-a8f1-3b196fcd043a"}],"image":[],"description":""},"fieldIdentifiers":{"image":"8fc2c765-fcec-4f01-a869-52f75891dd0a","description":"94bf855c-6c37-47ca-b304-5190673fab2b","selectedAssets":"147f2441-929c-40a7-aa54-1a690414fd2c"}}]},{"identifier":"410b726e-9653-4f70-bdc2-588fec713821","type":"Kentico.Widget.RichText","variants":[{"identifier":"0ca660cd-a007-4382-abda-479f7cc5bc2c","properties":{"content":"<p id=\"isPasted\"><strong>Step 9: Allow users to edit blog categories</strong></p><p>With the listing so far, clicking on an item in the list won't do anything. We still need to wire up an edit screen, which consists of two classes: one that allows for the ID of the edited object to be parameterized into the URL, and the second that represents the actual edit form.</p><p>To set up the parameterization, we'll create a class that inherits from <strong>EditSectionPage</strong>. The process is straightforward; Kentico provides a constants class that contains the slug we need to use: <strong>PageParameterConstants.PARAMETERIZED_SLUG</strong>.</p>"},"fieldIdentifiers":{"content":"7df721d0-e01f-46ac-b070-d4680696445e"}}]},{"identifier":"763d5189-2dbd-415b-ae54-d12cbde513ae","type":"Goldfinch.CodeBlockWidget","variants":[{"identifier":"2bbcdf3e-9cce-48b2-9c0e-cf35d73b819f","properties":{"language":"csharp","code":"using BlogCategories;\nusing Goldfinch.Web.Admin.UIPages.BlogCategories;\nusing Kentico.Xperience.Admin.Base;\n\n[assembly: UIPage(\n\tparentType: typeof(BlogCategoryListing),\n\tslug: PageParameterConstants.PARAMETERIZED_SLUG,\n\tuiPageType: typeof(BlogCategoryEditSection),\n\tname: \"Edit section for blog category objects\",\n\ttemplateName: TemplateNames.SECTION_LAYOUT,\n\torder: 300)]\n\nnamespace Goldfinch.Web.Admin.UIPages.BlogCategories\n{\n\tpublic class BlogCategoryEditSection : EditSectionPage<BlogCategoryInfo>\n\t{\n\t}\n}"},"fieldIdentifiers":{"language":"020567b5-e9b2-4784-80be-ffe32d7b829b","code":"2d4fb2d4-4033-462a-a98c-ec89ae47bb85"}}]},{"identifier":"a166021a-0a39-4d9d-93a9-ab3b10674223","type":"Kentico.Widget.RichText","variants":[{"identifier":"1cecef98-8f75-4bb2-8b98-c85316925929","properties":{"content":"<p id=\"isPasted\">This parameterized slug generates a URL of&nbsp;<strong>/admin/blog-categories/list/{id}</strong>, where&nbsp;<strong>{id}&nbsp;</strong>is automatically replaced with the ID of the object you've clicked on in the object listing.</p><p>The second class completes the edit screen and follows a similar process as previous UIPages. It inherits from a Kentico class and adds an attribute.</p>"},"fieldIdentifiers":{"content":"bb191227-c9d5-48ed-af9d-f62e17df5082"}}]},{"identifier":"94adf07e-695f-4584-9a54-d498ef5a1918","type":"Goldfinch.CodeBlockWidget","variants":[{"identifier":"27fb8c6e-a2b2-4e63-91a3-6557e20cb4f3","properties":{"language":"csharp","code":"using BlogCategories;\nusing Goldfinch.Web.Admin.UIPages.BlogCategories;\nusing Kentico.Xperience.Admin.Base;\nusing Kentico.Xperience.Admin.Base.Forms;\n\n[assembly: UIPage(\n\tparentType: typeof(BlogCategoryEditSection),\n\tslug: \"edit\",\n\tuiPageType: typeof(BlogCategoryEdit),\n\tname: \"Edit a blog category\",\n\ttemplateName: TemplateNames.EDIT,\n\torder: UIPageOrder.First)]\n\nnamespace Goldfinch.Web.Admin.UIPages.BlogCategories\n{\n\tpublic class BlogCategoryEdit : InfoEditPage<BlogCategoryInfo>\n\t{\n\t\tpublic BlogCategoryEdit(IFormComponentMapper formComponentMapper, IFormDataBinder formDataBinder)\n\t\t\t: base(formComponentMapper, formDataBinder)\n\t\t{\n\t\t}\n\n\t\t[PageParameter(typeof(IntPageModelBinder))]\n\t\tpublic override int ObjectId { get; set; }\n\t}\n}"},"fieldIdentifiers":{"language":"bcbf58f7-4bab-40b9-82a1-f4889b878449","code":"2b548a69-fe02-4a03-a9c6-9ec5aded86b3"}}]},{"identifier":"d78b5abf-a9e7-49c1-bbbd-c7ec9fe5f8a0","type":"Kentico.Widget.RichText","variants":[{"identifier":"dda829d2-4733-4cd9-a262-dd064315a246","properties":{"content":"<p id=\"isPasted\">We need to implement the <strong>ObjectId&nbsp;</strong>property here, but we can utilise Kentico's <strong>PageParameter&nbsp;</strong>attribute to handle it. By informing the attribute about the type of binder we expect to use, the handling will be taken care of.</p><p>The edit screen is now ready, but the object listing still doesn't know of its existence! We need to go back to the listing's <strong>ConfigurePage </strong>method again and add the following line:</p>"},"fieldIdentifiers":{"content":"803ecb2b-0b3f-47f9-a1b0-ac3baef8b8b6"}}]},{"identifier":"94746c3f-5930-4098-9e4b-b4438c7f635d","type":"Goldfinch.CodeBlockWidget","variants":[{"identifier":"e4c186e3-8ef5-408e-8d69-d9657eb1d3aa","properties":{"language":"csharp","code":"PageConfiguration.AddEditRowAction<BlogCategoryEdit>();"},"fieldIdentifiers":{"language":"62843a2d-9f32-4a61-b846-73e28e3c370f","code":"bcbf375f-881b-467b-aa9f-be4f39a9a069"}}]},{"identifier":"19bba1a8-d57a-4da2-88f9-fd85565f56ba","type":"Kentico.Widget.RichText","variants":[{"identifier":"38877e4e-f7c9-4505-ad8a-c1f6350fd6aa","properties":{"content":"<p id=\"isPasted\"><strong>Additional support</strong></p><p>If you feel inspired to create your own custom modules in Xperience by Kentico, you can read more about it on the Kentico docs. There's a section dedicated to <a href=\"https://docs.xperience.io/xp/developers-and-admins/customization/extend-the-administration-interface\" rel=\"noopener noreferrer\" target=\"_blank\">extending the administration interface</a>. The docs also contain an example of creating an <a href=\"https://docs.xperience.io/xp/developers-and-admins/customization/object-types/example-offices-management-application\" rel=\"noopener noreferrer\" target=\"_blank\">Office management application</a>, guiding you through a similar step-by-step process of creating a custom module.</p><p>Or, if you've done enough reading and want to get straight into coding, then there are a couple of new tools created by Sean G. Wright, Kentico's Lead Product Evangelist. He's created a collection of <a href=\"https://github.com/seangwright/xperience-community-vscode-snippets\" rel=\"noopener noreferrer\" target=\"_blank\">VS Code snippets</a>, making it far quicker and easier to create these UI Pages without needing to refer to the documentation too often. If VS Code isn't your IDE of choice, then there's the <a href=\"https://github.com/seangwright/xperience-community-dotnet-item-templates\" rel=\"noopener noreferrer\" target=\"_blank\">.NET Item Templates</a> package, which allows you to achieve similar efficiencies, whether you prefer the command line or working within Visual Studio itself.</p>"},"fieldIdentifiers":{"content":"c1b99d80-49b1-42e0-9481-377dd3db56a7"}}]},{"identifier":"96e2370d-d74f-476e-8363-520f94015a6e","type":"Kentico.Widget.RichText","variants":[{"identifier":"b0d95398-b55f-4168-b41b-1bebf57d093a","properties":{"content":"<p><em id=\"isPasted\">This article was written using Xperience by Kentico version 26.4.0.</em></p>"},"fieldIdentifiers":{"content":"a4239361-c50b-4152-818b-3eddeeb7f47b"}}]}]}],"fieldIdentifiers":{}}]}]}]]>
  </ContentItemCommonDataVisualBuilderWidgets>
  <ContentItemReferences>
    <cms.contentitemreference>
      <ContentItemReferenceGroupGUID>303068e2-4728-40fe-a3ff-0c9279204c59</ContentItemReferenceGroupGUID>
      <ContentItemReferenceGUID>0a222895-95d0-4098-be92-6e0c1b803ba2</ContentItemReferenceGUID>
      <ContentItemReferenceSourceCommonDataID>
        <GUID>3e42a82e-c3b7-4205-8a01-fb44f01a230b</GUID>
        <ObjectType>cms.contentitemcommondata</ObjectType>
      </ContentItemReferenceSourceCommonDataID>
      <ContentItemReferenceTargetItemID>
        <CodeName>CreatingACustomModule-BlogCategoriesModule-o6whrelv</CodeName>
        <GUID>ff964a51-537c-434a-872d-f885ad7fb1fa</GUID>
        <ObjectType>cms.contentitem</ObjectType>
      </ContentItemReferenceTargetItemID>
    </cms.contentitemreference>
    <cms.contentitemreference>
      <ContentItemReferenceGroupGUID>147f2441-929c-40a7-aa54-1a690414fd2c</ContentItemReferenceGroupGUID>
      <ContentItemReferenceGUID>214df134-8066-4aba-ae11-a772a179ae6f</ContentItemReferenceGUID>
      <ContentItemReferenceSourceCommonDataID>
        <GUID>3e42a82e-c3b7-4205-8a01-fb44f01a230b</GUID>
        <ObjectType>cms.contentitemcommondata</ObjectType>
      </ContentItemReferenceSourceCommonDataID>
      <ContentItemReferenceTargetItemID>
        <CodeName>CreatingACustomModule-BlogCategoryCreate-kfc5ta1g</CodeName>
        <GUID>a757ff4d-7d27-4985-a8f1-3b196fcd043a</GUID>
        <ObjectType>cms.contentitem</ObjectType>
      </ContentItemReferenceTargetItemID>
    </cms.contentitemreference>
    <cms.contentitemreference>
      <ContentItemReferenceGroupGUID>0c4b18bb-c57a-4b98-b2b7-2c5e6b3d84d5</ContentItemReferenceGroupGUID>
      <ContentItemReferenceGUID>369c9c21-e6bc-4eea-8d9d-c18e820d66aa</ContentItemReferenceGUID>
      <ContentItemReferenceSourceCommonDataID>
        <GUID>3e42a82e-c3b7-4205-8a01-fb44f01a230b</GUID>
        <ObjectType>cms.contentitemcommondata</ObjectType>
      </ContentItemReferenceSourceCommonDataID>
      <ContentItemReferenceTargetItemID>
        <CodeName>CreatingACustomModule-CreateModule-n8jzhqit</CodeName>
        <GUID>16be6238-c0c1-4adb-b4ad-350d623c7ea5</GUID>
        <ObjectType>cms.contentitem</ObjectType>
      </ContentItemReferenceTargetItemID>
    </cms.contentitemreference>
    <cms.contentitemreference>
      <ContentItemReferenceGroupGUID>9f16f32f-cf1b-428b-8054-4dbc86064b99</ContentItemReferenceGroupGUID>
      <ContentItemReferenceGUID>c014f554-6a79-4eab-987e-b41e13ece31f</ContentItemReferenceGUID>
      <ContentItemReferenceSourceCommonDataID>
        <GUID>3e42a82e-c3b7-4205-8a01-fb44f01a230b</GUID>
        <ObjectType>cms.contentitemcommondata</ObjectType>
      </ContentItemReferenceSourceCommonDataID>
      <ContentItemReferenceTargetItemID>
        <CodeName>CreatingACustomModule-CreateClass-tpvwr6cq</CodeName>
        <GUID>28c7838b-4b99-4c5d-a392-90d72a473613</GUID>
        <ObjectType>cms.contentitem</ObjectType>
      </ContentItemReferenceTargetItemID>
    </cms.contentitemreference>
    <cms.contentitemreference>
      <ContentItemReferenceGroupGUID>138a9da8-854d-4fba-b16b-78b57e0d9b3b</ContentItemReferenceGroupGUID>
      <ContentItemReferenceGUID>c95e0471-a8db-4a43-9553-2d6f8964a242</ContentItemReferenceGUID>
      <ContentItemReferenceSourceCommonDataID>
        <GUID>3e42a82e-c3b7-4205-8a01-fb44f01a230b</GUID>
        <ObjectType>cms.contentitemcommondata</ObjectType>
      </ContentItemReferenceSourceCommonDataID>
      <ContentItemReferenceTargetItemID>
        <CodeName>CreatingACustomModule-CreateUIForm-owc7htgz</CodeName>
        <GUID>65e838e4-8d9f-41f5-82d3-c3f36933ed8b</GUID>
        <ObjectType>cms.contentitem</ObjectType>
      </ContentItemReferenceTargetItemID>
    </cms.contentitemreference>
    <cms.contentitemreference>
      <ContentItemReferenceGroupGUID>52491390-f9f3-457f-9bb6-91868a91a8e5</ContentItemReferenceGroupGUID>
      <ContentItemReferenceGUID>51ca7040-37a7-4a63-98dc-ccd432ff5b5f</ContentItemReferenceGUID>
      <ContentItemReferenceSourceCommonDataID>
        <GUID>3e42a82e-c3b7-4205-8a01-fb44f01a230b</GUID>
        <ObjectType>cms.contentitemcommondata</ObjectType>
      </ContentItemReferenceSourceCommonDataID>
      <ContentItemReferenceTargetItemID>
        <CodeName>CreatingACustomModule-BlogCategoriesListing-1s6kmkce</CodeName>
        <GUID>7df7e261-2bc7-4eff-bdc7-921679dcbce2</GUID>
        <ObjectType>cms.contentitem</ObjectType>
      </ContentItemReferenceTargetItemID>
    </cms.contentitemreference>
  </ContentItemReferences>
</cms.contentitemcommondata>