<?xml version="1.0" encoding="utf-8"?>
<cms.contentitemcommondata>
  <ContentItemCommonDataContentItemID>
    <CodeName>SettingUpGraphQLWithA.NETCoreSite-kn1d5vr8</CodeName>
    <GUID>4c6cede6-9de5-45be-8a99-e72d077891bf</GUID>
    <ObjectType>cms.contentitem</ObjectType>
  </ContentItemCommonDataContentItemID>
  <ContentItemCommonDataContentLanguageID>
    <CodeName>en</CodeName>
    <GUID>22960170-5c33-4d4e-a01b-fd4c8fcbd13d</GUID>
    <ObjectType>cms.contentlanguage</ObjectType>
  </ContentItemCommonDataContentLanguageID>
  <ContentItemCommonDataGUID>fa7d0c0f-c33d-4644-b741-e231dc92c564</ContentItemCommonDataGUID>
  <ContentItemCommonDataIsLatest>True</ContentItemCommonDataIsLatest>
  <ContentItemCommonDataLastPublishedWhen>2024-07-24 13:58:00Z</ContentItemCommonDataLastPublishedWhen>
  <ContentItemCommonDataVersionStatus>2</ContentItemCommonDataVersionStatus>
  <ContentItemCommonDataVisualBuilderWidgets>
    <![CDATA[{"editableAreas":[{"identifier":"BlogPost","sections":[{"identifier":"110c8799-47e5-4845-bdaf-7da74408b84c","type":"Kentico.DefaultSection","properties":null,"zones":[{"identifier":"ba483742-d7fc-4cb2-9c70-f8d1df4159e1","widgets":[{"identifier":"d218594a-1006-43aa-8ca9-04f48e84a5af","type":"Kentico.Widget.RichText","variants":[{"identifier":"ec976afc-8dc8-4f0b-b863-bc902d2c5e7f","properties":{"content":"<p>With growing interest in websites being built using a headless CMS, the UI team at <a href=\"https://www.idhlagency.com/\" rel=\"noopener noreferrer\" target=\"_blank\">IDHL</a> have become very familiar with GraphQL APIs and the benefits it brings over traditional REST APIs. &nbsp;Many headless CMS providers offer GraphQL APIs or static site generator plugins which open up the use of GraphQL for data retrieval.</p><p>One of the main attractions of using GraphQL is the ability to specify fields that need to be returned when making API calls. &nbsp;This in turn reduces the size of the response payload, removing all of the bloat that would typically be associated with REST API response models.</p><p>UI developers can either use <a href=\"https://graphql.org/learn/introspection/\" rel=\"noopener noreferrer\" target=\"_blank\">introspection queries</a> to find the types and fields they need from the API, or they can use an IDE such as <a href=\"https://github.com/graphql/graphiql\" rel=\"noopener noreferrer\" target=\"_blank\">GraphiQL</a> (we set this up later! 👇) to visually browse the schema itself. &nbsp;Backend developers can define the entire schema, and it is up to the UI developer make the right decisions on what to return from the API.</p><p>No more having to ask and wait for a backend developer to modify the REST API to add or remove fields, the UI developer can just modify the query appropriately 😍 can be quite the time saver!</p><p><strong>Setting up GraphQL</strong></p><p>When it comes to implementing GraphQL, you have a wide range of <a href=\"https://graphql.org/code/\" rel=\"noopener noreferrer\" target=\"_blank\">tools</a> to choose from, that spread across many programming languages. &nbsp;You are not locked into a specific tool or programming language, as long as the <a href=\"https://spec.graphql.org/\" rel=\"noopener noreferrer\" target=\"_blank\">GraphQL specification</a> is followed you should be fine.</p><p>The perfect choice for me would be <a href=\"https://github.com/graphql-dotnet/graphql-dotnet\" rel=\"noopener noreferrer\" target=\"_blank\">graphql-dotnet</a> - I work with .NET on a daily basis and I want to set up GraphQL on <a href=\"https://xperience.io/\" rel=\"noopener noreferrer\" target=\"_blank\">Kentico Xperience</a>'s demo website built in .NET Core 3.1.</p><p>The Dancing Goat demo website has a number of classes that we could expose through a GraphQL API (Brewers, Coffees, Cafes, etc.), but to keep this example simple, the initial API will only allow developers to query cafe locations.</p><p>Once the demo website was up and running, I began by installing graphql-dotnet. &nbsp;You only really need to install the middleware NuGet package, <strong>GraphQL.Server.Transports.AspNetCore.SystemTextJson</strong>. &nbsp;The NuGet package already has the appropriate dependencies included to get a GraphQL endpoint up and running. &nbsp;You just need to register and configure it accordingly.</p><p>In the <strong>Startup</strong> class, we first need to register the GraphQL service, and add the GraphQL middleware to the HTTP request pipeline:</p>"},"fieldIdentifiers":{"content":"2a8486a0-3fa0-402a-8377-1ec3be861ac2"}}]},{"identifier":"8b74ed02-281e-47ae-84e3-cde9f0355a4a","type":"Goldfinch.CodeBlockWidget","variants":[{"identifier":"3bc2f195-bc52-4ec6-8a2c-14441dafadd7","properties":{"language":"csharp","code":"// Add using directives\r\nusing GraphQL.Server;\r\nusing GraphQL.Types;\r\n\r\nnamespace DancingGoat\r\n{\r\n    public class Startup\r\n    {\r\n\r\n        public void ConfigureServices(IServiceCollection services)\r\n        {\r\n            ...\r\n\r\n            // Register the GraphQL service, and the System.Text.Json deserializer\r\n            services.AddGraphQL().AddSystemTextJson();\r\n        }\r\n\r\n\r\n        public void Configure(IApplicationBuilder app, IWebHostEnvironment environment)\r\n        {\r\n            ...\r\n\r\n            // Add the GraphQL middleware to the HTTP request pipeline\r\n            app.UseGraphQL<ISchema>();\r\n        }\r\n    }\r\n}"},"fieldIdentifiers":{"language":"9911fc33-a757-47c7-a36b-2d8d78289f62","code":"2c18e714-bb2d-4b63-81a8-cf6418a93552"}}]},{"identifier":"dec7776e-4e46-48cb-85b7-8b7c1317ffa4","type":"Kentico.Widget.RichText","variants":[{"identifier":"23ff63dd-e639-4091-aef6-ea2d06fa8189","properties":{"content":"<p>Now the GraphQL middleware has been set up, we should provide it with a schema as the middleware is now expecting to have an ISchema implementation available. &nbsp;So lets create one!</p><p>This DancingGoatSchema class inherits from Schema, which implements the ISchema interface. &nbsp;All we want to do here, is register a RootQuery which will be the entry point for our GraphQL API.</p>"},"fieldIdentifiers":{"content":"c3893f20-855a-4f5e-8ddd-14c61f641ea2"}}]},{"identifier":"744563c6-5ef0-442d-89f0-420343ec4721","type":"Goldfinch.CodeBlockWidget","variants":[{"identifier":"54c53a12-a3d5-4031-94b3-2b4f425c5124","properties":{"language":"csharp","code":"using DancingGoat.GraphQL.Queries;\r\nusing GraphQL.Types;\r\nusing GraphQL.Utilities;\r\nusing System;\r\n\r\nnamespace DancingGoat.GraphQL.Schemas\r\n{\r\n    public class DancingGoatSchema : Schema\r\n    {\r\n        public DancingGoatSchema(IServiceProvider provider) : base(provider)\r\n        {\r\n            Query = provider.GetRequiredService<RootQuery>();\r\n        }\r\n    }\r\n}"},"fieldIdentifiers":{"language":"369f8060-3835-48d2-aa81-5e184e93cd1f","code":"d3bdb600-0319-4117-877e-d8ea5c2ac171"}}]},{"identifier":"bd21f9fc-2c81-4714-b3f7-fc452b5e89c7","type":"Kentico.Widget.RichText","variants":[{"identifier":"5601b50d-217d-4929-9096-eea2385609ac","properties":{"content":"<p>You're probably aware by now I have named the next class we need to create as RootQuery. &nbsp;I have deliberately called it this because GraphQL only allows a single root query object to be registered. &nbsp; You <em>could&nbsp;</em>register multiple GraphQL endpoints, and have a different RootQuery for each, but ideally we want just a single GraphQL endpoint.</p><p>To get around this, you can use <a href=\"https://graphql-dotnet.github.io/docs/getting-started/query-organization/\" rel=\"noopener noreferrer\" target=\"_blank\">Query Organization</a> and register different sub queries below the root query. &nbsp;This is how I have approached the RootQuery class below:</p>"},"fieldIdentifiers":{"content":"1a918a6f-6143-4342-80d6-462da0899608"}}]},{"identifier":"e3cc04ab-b826-498c-a949-136c6c5b9a79","type":"Goldfinch.CodeBlockWidget","variants":[{"identifier":"9071b0ec-cb09-47d8-be85-08d547792e60","properties":{"language":"csharp","code":"using GraphQL.Types;\r\n\r\nnamespace DancingGoat.GraphQL.Queries\r\n{\r\n    public class RootQuery : ObjectGraphType\r\n    {\r\n        public RootQuery()\r\n        {\r\n            // https://graphql-dotnet.github.io/docs/getting-started/query-organization/\r\n            Field<CafeQuery>(\"cafes\", resolve: context => new { });\r\n\r\n            // in the future, we could add more sub query roots, for Brewers, Coffees, etc.\r\n            // Field<BrewerQuery>(\"brewers\", resolve: context => new { });\r\n            // etc...\r\n        }\r\n    }\r\n}"},"fieldIdentifiers":{"language":"c08d990c-b56a-4807-a039-880391f661d0","code":"bee0394f-7069-451c-98f0-8a0330bae093"}}]},{"identifier":"978e97fd-b641-40bc-9e58-23e9ee4980c2","type":"Kentico.Widget.RichText","variants":[{"identifier":"f0df3d18-e62a-438e-a4c7-89f93949ebf2","properties":{"content":"<p>Our RootQuery contains a field called CafeQuery, this is our first sub query being registered, and we now need to provide a class to represent it.&nbsp;</p>"},"fieldIdentifiers":{"content":"91fdaa8e-ee60-4b89-aef2-b64d162207c2"}}]},{"identifier":"a34813e8-a47f-44b7-b4e2-80ce63e5c4c9","type":"Goldfinch.CodeBlockWidget","variants":[{"identifier":"83dd9e32-de8e-49bf-ac5f-ce31ed9c3fbe","properties":{"language":"csharp","code":"using DancingGoat.GraphQL.GraphTypes;\r\nusing DancingGoat.Models;\r\nusing GraphQL;\r\nusing GraphQL.Types;\r\nusing System.Linq;\r\n\r\nnamespace DancingGoat.GraphQL.Queries\r\n{\r\n    public class CafeQuery : ObjectGraphType\r\n    {\r\n        public CafeQuery(CafeRepository cafeRepository)\r\n        {\r\n            Field<ListGraphType<CafeType>>(\"items\", resolve: context => cafeRepository.GetCompanyCafes(\"/\"));\r\n            Field<CafeType>(\"item\",\r\n                arguments: new QueryArguments(\r\n                    new QueryArgument<StringGraphType>\r\n                    {\r\n                        Name = \"name\"\r\n                    }\r\n                ),\r\n                resolve: context => cafeRepository.GetCompanyCafes(\"/\")\r\n                    .FirstOrDefault(x => x.Name.Equals(context.GetArgument<string>(\"name\")))\r\n                );\r\n        }\r\n    }\r\n}"},"fieldIdentifiers":{"language":"e0eb8e33-f3e3-4d71-ac45-9221be3a4016","code":"4c5f24f7-7028-4455-ac4c-944093411eb9"}}]},{"identifier":"bcb5422b-5de2-4505-83c3-0e2f6ddb6c7a","type":"Kentico.Widget.RichText","variants":[{"identifier":"5b2a55c9-cd5c-43b2-a72f-5b7fe168f1b9","properties":{"content":"<p>The first piece of functionality I am exposing to the GraphQL endpoint is a field called \"items\", this provides the ability to query and return all of the cafe documents. &nbsp;We are making use of the repository that comes with Dancing Goat out of the box to do any data retrieval from the database.</p><p>The second field called \"item\" returns a single cafe document, which is searched based on a string argument passed in with the GraphQL query. &nbsp;We are once again using the cafe repository, but this time we're filtering the results by finding the first exact match on the cafe name property.</p><p>But...we can't just return the Cafe generated model to the GraphQL API, we need to map the Cafe model to a class that inherits from ObjectGraphType. &nbsp;An example of how to do this is below:</p>"},"fieldIdentifiers":{"content":"810334a8-0e5a-4768-a1f3-34ed29802bc4"}}]},{"identifier":"5b38af30-98a5-474d-9c78-a2e89bff4335","type":"Goldfinch.CodeBlockWidget","variants":[{"identifier":"a8a88905-1ff0-4162-a9df-d09719da0d7b","properties":{"language":"csharp","code":"using CMS.DocumentEngine.Types.DancingGoatCore;\r\nusing GraphQL.Types;\r\n\r\nnamespace DancingGoat.GraphQL.GraphTypes\r\n{\r\n    public class CafeType : ObjectGraphType<Cafe>\r\n    {\r\n        public CafeType()\r\n        {\r\n            Field(x => x.Name);\r\n            Field(x => x.Phone);\r\n            Field(x => x.Email);\r\n            Field(x => x.ZIP);\r\n            Field(x => x.Street);\r\n            Field(x => x.City);\r\n            Field(x => x.Country);\r\n        }\r\n    }\r\n}"},"fieldIdentifiers":{"language":"38836a8f-f09c-4d7a-81bf-0d138b8658f2","code":"2fe46da2-ecf3-4969-8261-b09d08d42c0f"}}]},{"identifier":"b7eb6b34-ab81-4784-9587-a68799155202","type":"Kentico.Widget.RichText","variants":[{"identifier":"247cb995-9d45-46ff-bc74-d0f446824101","properties":{"content":"<p>Hang on! 🛑 The site will most likely compile now, but we haven't set up any of our new types to be available through .NET Core's dependency injection. &nbsp;We need to head back to the&nbsp;<strong>Startup</strong> class, and add them in:&nbsp;</p>"},"fieldIdentifiers":{"content":"e2a20e8b-e2c7-44f5-b279-d87b7c77d6cb"}}]},{"identifier":"110dafb2-52ac-47e2-9396-86efbf6449d1","type":"Goldfinch.CodeBlockWidget","variants":[{"identifier":"4f880713-ff96-4951-8159-8c969ec0a8e4","properties":{"language":"csharp","code":"// Add using directives\r\nusing GraphQL.Server;\r\nusing GraphQL.Types;\r\n\r\nnamespace DancingGoat\r\n{\r\n    public class Startup\r\n    {\r\n        public void ConfigureServices(IServiceCollection services)\r\n        {\r\n            ...\r\n\r\n            services.AddSingleton<ISchema, DancingGoatSchema>();\r\n            services.AddSingleton<RootQuery>();\r\n            services.AddSingleton<CafeQuery>();\r\n            services.AddSingleton<CafeType>();\r\n\r\n            // Register the GraphQL service, and the System.Text.Json deserializer\r\n            services.AddGraphQL().AddSystemTextJson();\r\n        }\r\n    }\r\n}"},"fieldIdentifiers":{"language":"7891e2df-7aaa-4e89-8d0f-693f9f48b8e6","code":"871b14c7-c14e-42d3-b72b-983bddd4f25f"}}]},{"identifier":"4da809e0-2888-4ddd-8b5f-7203fdd1f895","type":"Kentico.Widget.RichText","variants":[{"identifier":"3ef58655-0356-40d8-98ca-6f5b3e8dd7a8","properties":{"content":"<p>You should now be able to query the GraphQL endpoint by POSTing a query to&nbsp;<strong>http://localhost:57562/graphql</strong>. &nbsp;To call the \"items\" part of our CafeQuery, we can use the following query:&nbsp;</p>"},"fieldIdentifiers":{"content":"2652041b-2af8-471e-ac85-19b1ff8fb174"}}]},{"identifier":"b3594006-ac30-4d88-a68d-7c2d2f9d103f","type":"Goldfinch.CodeBlockWidget","variants":[{"identifier":"7c0a20ac-b2b1-490c-a81e-233c112bf6f8","properties":{"language":"javascript","code":"query CafeList {\r\n  cafes {\r\n    items {\r\n      name\r\n    }\r\n  }\r\n}"},"fieldIdentifiers":{"language":"6ada6972-d73e-4478-ae1b-af00873c8910","code":"0e2d3ca2-03b7-41f0-b34a-fe25759fb2fb"}}]},{"identifier":"ab9084fb-9e9a-4f1b-ab2f-47fdd9e94287","type":"Kentico.Widget.RichText","variants":[{"identifier":"17466b4a-5e0d-4f1f-ab4c-591edfe9a314","properties":{"content":"<p>And you should get a response with all of the cafes and their names:&nbsp;</p>"},"fieldIdentifiers":{"content":"bea48127-fd6b-4aec-81fb-914eb3d0ad82"}}]},{"identifier":"2d8d4850-0c2f-4a82-b633-8db57a158c96","type":"Goldfinch.CodeBlockWidget","variants":[{"identifier":"44da9c2e-20b1-40a8-8c6d-326381884939","properties":{"language":"javascript","code":"{\r\n    \"data\": {\r\n        \"cafes\": {\r\n            \"items\": [\r\n                {\r\n                    \"name\": \"Boston\"\r\n                },\r\n                {\r\n                    \"name\": \"Chicago\"\r\n                },\r\n                {\r\n                    \"name\": \"Los Angeles\"\r\n                },\r\n                {\r\n                    \"name\": \"New York\"\r\n                }\r\n            ]\r\n        }\r\n    }\r\n}"},"fieldIdentifiers":{"language":"44c1ec1b-5d71-49f5-9f5a-0837ab617dfe","code":"ce444df8-8752-40ae-869e-9bdb4a8d41d7"}}]},{"identifier":"83d8976c-08fe-4ad9-b468-8a2f4c252ad3","type":"Kentico.Widget.RichText","variants":[{"identifier":"b873c243-0cfb-4dae-aa85-d94217bc566f","properties":{"content":"<p><strong>GraphiQL</strong></p><p>Creating GraphQL queries on your own can be confusing at first if you are not aware of the schema definition, or you are not familiar with how to use <a href=\"https://graphql.org/learn/introspection/\" rel=\"noopener noreferrer\" target=\"_blank\">introspection queries</a>.</p><p>What we can do instead is set up an in-browser IDE such as GraphiQL, this will show you the entire schema in the Explorer tab, and guide you into building up your own queries. &nbsp;It is also great for debugging purposes.</p><p>It's really easy to set up too, first install the NuGet package <strong>GraphQL.Server.Ui.GraphiQL</strong>.</p><p>Once again head over to the <strong>Startup</strong> class, and add the GraphiQL middleware to the HTTP request pipeline.</p>"},"fieldIdentifiers":{"content":"2bd359c8-5ccd-42e8-88f4-5e1707f930e6"}}]},{"identifier":"0051c285-b4e0-4b47-83b4-d379078cc664","type":"Goldfinch.CodeBlockWidget","variants":[{"identifier":"9ede0b71-bba0-4649-8d32-0bd2435e7612","properties":{"language":"csharp","code":"// Add using directives\r\nusing GraphQL.Server;\r\nusing GraphQL.Types;\r\n\r\nnamespace DancingGoat\r\n{\r\n    public class Startup\r\n    {\r\n        public void Configure(IApplicationBuilder app, IWebHostEnvironment environment)\r\n        {\r\n            ...\r\n\r\n            // Add the GraphQL middleware to the HTTP request pipeline\r\n            app.UseGraphQL<ISchema>();\r\n\r\n            // Add the GraphiQL middleware to the HTTP request pipeline\r\n            app.UseGraphiQLServer();\r\n        }\r\n    }\r\n}"},"fieldIdentifiers":{"language":"2039503d-d4a8-485d-98d6-926613d40057","code":"f7134454-49c7-4ee6-a4a0-afb2e8687b40"}}]},{"identifier":"614d43af-b943-4817-bdbf-3d8d9d84a1cd","type":"Kentico.Widget.RichText","variants":[{"identifier":"d7d47ee9-5cb5-4c51-8487-aba246f45a64","properties":{"content":"<p>After compiling and running the site again, you should be able to access the GraphiQL IDE through&nbsp;<strong>http://localhost:57562/ui/graphiql/</strong> &nbsp;</p>"},"fieldIdentifiers":{"content":"a712033b-0f43-4e91-9f10-54d0afd5be05"}}]},{"identifier":"c39bb3b6-9e1a-42f8-8a94-907950dc2524","type":"Goldfinch.ImageWidget","variants":[{"identifier":"8596f73a-1101-4ab1-ad46-311cad4aaf7a","properties":{"selectedAssets":[{"identifier":"ccd5784c-99e9-414b-b566-30d8c41f4218"}]},"fieldIdentifiers":{"selectedAssets":"88c8affe-f4f4-4acb-b616-dba2350d6e45"}}]}]}],"fieldIdentifiers":{}}]}]}]]>
  </ContentItemCommonDataVisualBuilderWidgets>
  <ContentItemReferences>
    <cms.contentitemreference>
      <ContentItemReferenceGroupGUID>88c8affe-f4f4-4acb-b616-dba2350d6e45</ContentItemReferenceGroupGUID>
      <ContentItemReferenceGUID>18f8e9cf-59f5-4140-b9dc-e8f259fb06ba</ContentItemReferenceGUID>
      <ContentItemReferenceSourceCommonDataID>
        <GUID>fa7d0c0f-c33d-4644-b741-e231dc92c564</GUID>
        <ObjectType>cms.contentitemcommondata</ObjectType>
      </ContentItemReferenceSourceCommonDataID>
      <ContentItemReferenceTargetItemID>
        <CodeName>GraphQL.NETCore-GraphiQL-q6upxqfv</CodeName>
        <GUID>ccd5784c-99e9-414b-b566-30d8c41f4218</GUID>
        <ObjectType>cms.contentitem</ObjectType>
      </ContentItemReferenceTargetItemID>
    </cms.contentitemreference>
  </ContentItemReferences>
</cms.contentitemcommondata>